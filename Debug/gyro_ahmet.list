
gyro_ahmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006984  08006984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080069e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000264  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000268  20000268  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ad39  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cc7  00000000  00000000  0003ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010f8  00000000  00000000  0003da38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fd0  00000000  00000000  0003eb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000089a2  00000000  00000000  0003fb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005143  00000000  00000000  000484a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d5e5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004784  00000000  00000000  0004d664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800696c 	.word	0x0800696c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800696c 	.word	0x0800696c

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90b 	bl	80003f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f006 f9e8 	bl	80065b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <HAL_InitTick+0x30>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <HAL_InitTick+0x34>)
 8000202:	fba2 2303 	umull	r2, r3, r2, r3
 8000206:	099b      	lsrs	r3, r3, #6
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f928 	bl	800045e <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800020e:	2200      	movs	r2, #0
 8000210:	6879      	ldr	r1, [r7, #4]
 8000212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000216:	f000 f8f8 	bl	800040a <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800021a:	2300      	movs	r3, #0
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000000 	.word	0x20000000
 8000228:	10624dd3 	.word	0x10624dd3

0800022c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  uwTick++;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <HAL_IncTick+0x18>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x18>)
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	2000003c 	.word	0x2000003c

08000248 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  return uwTick;  
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_GetTick+0x14>)
 800024e:	681b      	ldr	r3, [r3, #0]
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	2000003c 	.word	0x2000003c

08000260 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f003 0307 	and.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <NVIC_SetPriorityGrouping+0x44>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800027c:	4013      	ands	r3, r2
 800027e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800028c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <NVIC_SetPriorityGrouping+0x44>)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	60d3      	str	r3, [r2, #12]
}
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <NVIC_GetPriorityGrouping+0x18>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	0a1b      	lsrs	r3, r3, #8
 80002b2:	f003 0307 	and.w	r3, r3, #7
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ce:	4909      	ldr	r1, [pc, #36]	; (80002f4 <NVIC_EnableIRQ+0x30>)
 80002d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d4:	095b      	lsrs	r3, r3, #5
 80002d6:	79fa      	ldrb	r2, [r7, #7]
 80002d8:	f002 021f 	and.w	r2, r2, #31
 80002dc:	2001      	movs	r0, #1
 80002de:	fa00 f202 	lsl.w	r2, r0, r2
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	490d      	ldr	r1, [pc, #52]	; (8000344 <NVIC_SetPriority+0x4c>)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 030f 	and.w	r3, r3, #15
 8000314:	3b04      	subs	r3, #4
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	4908      	ldr	r1, [pc, #32]	; (8000348 <NVIC_SetPriority+0x50>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	2201      	movs	r2, #1
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	1e5a      	subs	r2, r3, #1
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	401a      	ands	r2, r3
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000392:	2101      	movs	r1, #1
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	1e59      	subs	r1, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a0:	4313      	orrs	r3, r2
         );
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3724      	adds	r7, #36	; 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c0:	d301      	bcc.n	80003c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c2:	2301      	movs	r3, #1
 80003c4:	e00f      	b.n	80003e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <SysTick_Config+0x40>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ce:	210f      	movs	r1, #15
 80003d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SysTick_Config+0x40>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <SysTick_Config+0x40>)
 80003e0:	2207      	movs	r2, #7
 80003e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010

080003f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff2f 	bl	8000260 <NVIC_SetPriorityGrouping>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b086      	sub	sp, #24
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800041c:	f7ff ff44 	bl	80002a8 <NVIC_GetPriorityGrouping>
 8000420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	68b9      	ldr	r1, [r7, #8]
 8000426:	6978      	ldr	r0, [r7, #20]
 8000428:	f7ff ff90 	bl	800034c <NVIC_EncodePriority>
 800042c:	4602      	mov	r2, r0
 800042e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff ff5f 	bl	80002f8 <NVIC_SetPriority>
}
 800043a:	bf00      	nop
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	4603      	mov	r3, r0
 800044a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800044c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff37 	bl	80002c4 <NVIC_EnableIRQ>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ffa2 	bl	80003b0 <SysTick_Config>
 800046c:	4603      	mov	r3, r0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b04      	cmp	r3, #4
 8000484:	d106      	bne.n	8000494 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000486:	4a09      	ldr	r2, [pc, #36]	; (80004ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000492:	e005      	b.n	80004a0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000494:	4a05      	ldr	r2, [pc, #20]	; (80004ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0304 	bic.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004b4:	f000 f802 	bl	80004bc <HAL_SYSTICK_Callback>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b084      	sub	sp, #16
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d005      	beq.n	80004ec <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2204      	movs	r2, #4
 80004e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e027      	b.n	800053c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	f022 020e 	bic.w	r2, r2, #14
 80004fa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	f022 0201 	bic.w	r2, r2, #1
 800050a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000514:	2101      	movs	r1, #1
 8000516:	fa01 f202 	lsl.w	r2, r1, r2
 800051a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2201      	movs	r2, #1
 8000520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000530:	2b00      	cmp	r3, #0
 8000532:	d003      	beq.n	800053c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	4798      	blx	r3
    } 
  }
  return status;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800055e:	e154      	b.n	800080a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	2101      	movs	r1, #1
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	f000 8146 	beq.w	8000804 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d003      	beq.n	8000588 <HAL_GPIO_Init+0x40>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b12      	cmp	r3, #18
 8000586:	d123      	bne.n	80005d0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	08da      	lsrs	r2, r3, #3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3208      	adds	r2, #8
 8000590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000594:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	220f      	movs	r2, #15
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691a      	ldr	r2, [r3, #16]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	4313      	orrs	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	08da      	lsrs	r2, r3, #3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3208      	adds	r2, #8
 80005ca:	6939      	ldr	r1, [r7, #16]
 80005cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2203      	movs	r2, #3
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f003 0203 	and.w	r2, r3, #3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <HAL_GPIO_Init+0xdc>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d007      	beq.n	8000624 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	2b11      	cmp	r3, #17
 800061a:	d003      	beq.n	8000624 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b12      	cmp	r3, #18
 8000622:	d130      	bne.n	8000686 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	4313      	orrs	r3, r2
 800064c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800065a:	2201      	movs	r2, #1
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	f003 0201 	and.w	r2, r3, #1
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	4313      	orrs	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	2203      	movs	r2, #3
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4013      	ands	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f000 80a0 	beq.w	8000804 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	4a58      	ldr	r2, [pc, #352]	; (8000828 <HAL_GPIO_Init+0x2e0>)
 80006c6:	4b58      	ldr	r3, [pc, #352]	; (8000828 <HAL_GPIO_Init+0x2e0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b55      	ldr	r3, [pc, #340]	; (8000828 <HAL_GPIO_Init+0x2e0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006dc:	4a53      	ldr	r2, [pc, #332]	; (800082c <HAL_GPIO_Init+0x2e4>)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	089b      	lsrs	r3, r3, #2
 80006e2:	3302      	adds	r3, #2
 80006e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	f003 0303 	and.w	r3, r3, #3
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	220f      	movs	r2, #15
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4013      	ands	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000706:	d019      	beq.n	800073c <HAL_GPIO_Init+0x1f4>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a49      	ldr	r2, [pc, #292]	; (8000830 <HAL_GPIO_Init+0x2e8>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d013      	beq.n	8000738 <HAL_GPIO_Init+0x1f0>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a48      	ldr	r2, [pc, #288]	; (8000834 <HAL_GPIO_Init+0x2ec>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d00d      	beq.n	8000734 <HAL_GPIO_Init+0x1ec>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a47      	ldr	r2, [pc, #284]	; (8000838 <HAL_GPIO_Init+0x2f0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d007      	beq.n	8000730 <HAL_GPIO_Init+0x1e8>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a46      	ldr	r2, [pc, #280]	; (800083c <HAL_GPIO_Init+0x2f4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d101      	bne.n	800072c <HAL_GPIO_Init+0x1e4>
 8000728:	2304      	movs	r3, #4
 800072a:	e008      	b.n	800073e <HAL_GPIO_Init+0x1f6>
 800072c:	2305      	movs	r3, #5
 800072e:	e006      	b.n	800073e <HAL_GPIO_Init+0x1f6>
 8000730:	2303      	movs	r3, #3
 8000732:	e004      	b.n	800073e <HAL_GPIO_Init+0x1f6>
 8000734:	2302      	movs	r3, #2
 8000736:	e002      	b.n	800073e <HAL_GPIO_Init+0x1f6>
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <HAL_GPIO_Init+0x1f6>
 800073c:	2300      	movs	r3, #0
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	f002 0203 	and.w	r2, r2, #3
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	4093      	lsls	r3, r2
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	4313      	orrs	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800074e:	4937      	ldr	r1, [pc, #220]	; (800082c <HAL_GPIO_Init+0x2e4>)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	3302      	adds	r3, #2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800075c:	4b38      	ldr	r3, [pc, #224]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	43db      	mvns	r3, r3
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4313      	orrs	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000780:	4a2f      	ldr	r2, [pc, #188]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	43db      	mvns	r3, r3
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	43db      	mvns	r3, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	43db      	mvns	r3, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_GPIO_Init+0x2f8>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	fa22 f303 	lsr.w	r3, r2, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	f47f aea3 	bne.w	8000560 <HAL_GPIO_Init+0x18>
  }
}
 800081a:	bf00      	nop
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000
 8000830:	48000400 	.word	0x48000400
 8000834:	48000800 	.word	0x48000800
 8000838:	48000c00 	.word	0x48000c00
 800083c:	48001000 	.word	0x48001000
 8000840:	40010400 	.word	0x40010400

08000844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
 8000850:	4613      	mov	r3, r2
 8000852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	787b      	ldrb	r3, [r7, #1]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000860:	e002      	b.n	8000868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	405a      	eors	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	615a      	str	r2, [r3, #20]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e080      	b.n	80009ac <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f005 f8a8 	bl	8005a14 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	f022 0201 	bic.w	r2, r2, #1
 80008da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	6852      	ldr	r2, [r2, #4]
 80008e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80008e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	6892      	ldr	r2, [r2, #8]
 80008f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d107      	bne.n	8000912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6892      	ldr	r2, [r2, #8]
 800090a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	e006      	b.n	8000920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	6892      	ldr	r2, [r2, #8]
 800091a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800091e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d104      	bne.n	8000932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	68d2      	ldr	r2, [r2, #12]
 8000950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6911      	ldr	r1, [r2, #16]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	6952      	ldr	r2, [r2, #20]
 8000962:	4311      	orrs	r1, r2
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	6992      	ldr	r2, [r2, #24]
 8000968:	0212      	lsls	r2, r2, #8
 800096a:	430a      	orrs	r2, r1
 800096c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	69d1      	ldr	r1, [r2, #28]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6a12      	ldr	r2, [r2, #32]
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	f042 0201 	orr.w	r2, r2, #1
 800098c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2220      	movs	r2, #32
 8000998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	461a      	mov	r2, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	817b      	strh	r3, [r7, #10]
 80009c4:	4613      	mov	r3, r2
 80009c6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d154      	bne.n	8000a82 <HAL_I2C_Master_Transmit_IT+0xce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009e6:	d101      	bne.n	80009ec <HAL_I2C_Master_Transmit_IT+0x38>
    {
      return HAL_BUSY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	e04b      	b.n	8000a84 <HAL_I2C_Master_Transmit_IT+0xd0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <HAL_I2C_Master_Transmit_IT+0x46>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e044      	b.n	8000a84 <HAL_I2C_Master_Transmit_IT+0xd0>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2221      	movs	r2, #33	; 0x21
 8000a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2200      	movs	r2, #0
 8000a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	893a      	ldrh	r2, [r7, #8]
 8000a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	2bff      	cmp	r3, #255	; 0xff
 8000a38:	d906      	bls.n	8000a48 <HAL_I2C_Master_Transmit_IT+0x94>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8000a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e007      	b.n	8000a58 <HAL_I2C_Master_Transmit_IT+0xa4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a56:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	8979      	ldrh	r1, [r7, #10]
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f001 f9b3 	bl	8001dd4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000a76:	2101      	movs	r1, #1
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f001 f9d9 	bl	8001e30 <I2C_Enable_IRQ>

    return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_I2C_Master_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8000a82:	2302      	movs	r3, #2
  }
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	ffff0000 	.word	0xffff0000
 8000a90:	08000da7 	.word	0x08000da7

08000a94 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	817b      	strh	r3, [r7, #10]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	813b      	strh	r3, [r7, #8]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  uint32_t xfermode = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d17d      	bne.n	8000bbe <HAL_I2C_Mem_Read_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_I2C_Mem_Read_IT+0x3a>
 8000ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      return  HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e076      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ae0:	d101      	bne.n	8000ae6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e06c      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d101      	bne.n	8000af4 <HAL_I2C_Mem_Read_IT+0x60>
 8000af0:	2302      	movs	r3, #2
 8000af2:	e065      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000afc:	f7ff fba4 	bl	8000248 <HAL_GetTick>
 8000b00:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2222      	movs	r2, #34	; 0x22
 8000b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a3a      	ldr	r2, [r7, #32]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <HAL_I2C_Mem_Read_IT+0x134>)
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_I2C_Mem_Read_IT+0x138>)
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	2bff      	cmp	r3, #255	; 0xff
 8000b38:	d906      	bls.n	8000b48 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8000b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e007      	b.n	8000b58 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b56:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	893a      	ldrh	r2, [r7, #8]
 8000b5c:	8979      	ldrh	r1, [r7, #10]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	2319      	movs	r3, #25
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4603      	mov	r3, r0
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 fc31 	bl	80013d0 <I2C_RequestMemoryRead>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00f      	beq.n	8000b94 <HAL_I2C_Mem_Read_IT+0x100>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d105      	bne.n	8000b88 <HAL_I2C_Mem_Read_IT+0xf4>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e01b      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e015      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	8979      	ldrh	r1, [r7, #10]
 8000b9c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f001 f915 	bl	8001dd4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f001 f93b 	bl	8001e30 <I2C_Enable_IRQ>

    return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_I2C_Mem_Read_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8000bbe:	2302      	movs	r3, #2
  }
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	ffff0000 	.word	0xffff0000
 8000bcc:	08000da7 	.word	0x08000da7

08000bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	68f9      	ldr	r1, [r7, #12]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00f      	beq.n	8000c46 <HAL_I2C_ER_IRQHandler+0x42>
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00a      	beq.n	8000c46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f043 0201 	orr.w	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00f      	beq.n	8000c70 <HAL_I2C_ER_IRQHandler+0x6c>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00a      	beq.n	8000c70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f043 0208 	orr.w	r2, r3, #8
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00f      	beq.n	8000c9a <HAL_I2C_ER_IRQHandler+0x96>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00a      	beq.n	8000c9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	f043 0202 	orr.w	r2, r3, #2
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 030b 	and.w	r3, r3, #11
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4619      	mov	r1, r3
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 feab 	bl	8001a08 <I2C_ITError>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	4613      	mov	r3, r2
 8000d18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d98:	b2db      	uxtb	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b088      	sub	sp, #32
 8000daa:	af02      	add	r7, sp, #8
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	82fb      	strh	r3, [r7, #22]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d101      	bne.n	8000dc4 <I2C_Master_ISR_IT+0x1e>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e101      	b.n	8000fc8 <I2C_Master_ISR_IT+0x222>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d012      	beq.n	8000dfc <I2C_Master_ISR_IT+0x56>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2210      	movs	r2, #16
 8000de6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f043 0204 	orr.w	r2, r3, #4
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 fec5 	bl	8001b84 <I2C_Flush_TXDR>
 8000dfa:	e0d2      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01c      	beq.n	8000e40 <I2C_Master_ISR_IT+0x9a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d017      	beq.n	8000e40 <I2C_Master_ISR_IT+0x9a>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	1c59      	adds	r1, r3, #1
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	6251      	str	r1, [r2, #36]	; 0x24
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e3e:	e0b0      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01b      	beq.n	8000e82 <I2C_Master_ISR_IT+0xdc>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d016      	beq.n	8000e82 <I2C_Master_ISR_IT+0xdc>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	1c58      	adds	r0, r3, #1
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	6248      	str	r0, [r1, #36]	; 0x24
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	6293      	str	r3, [r2, #40]	; 0x28
    hi2c->XferSize--;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e80:	e08f      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d05d      	beq.n	8000f48 <I2C_Master_ISR_IT+0x1a2>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d058      	beq.n	8000f48 <I2C_Master_ISR_IT+0x1a2>
  {
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d142      	bne.n	8000f24 <I2C_Master_ISR_IT+0x17e>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d03d      	beq.n	8000f24 <I2C_Master_ISR_IT+0x17e>
    {
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb4:	82fb      	strh	r3, [r7, #22]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	2bff      	cmp	r3, #255	; 0xff
 8000ebe:	d90e      	bls.n	8000ede <I2C_Master_ISR_IT+0x138>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	8af9      	ldrh	r1, [r7, #22]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f000 ff7c 	bl	8001dd4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000edc:	e033      	b.n	8000f46 <I2C_Master_ISR_IT+0x1a0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ef0:	d00c      	beq.n	8000f0c <I2C_Master_ISR_IT+0x166>
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000efc:	8af9      	ldrh	r1, [r7, #22]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4603      	mov	r3, r0
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 ff65 	bl	8001dd4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f0a:	e01c      	b.n	8000f46 <I2C_Master_ISR_IT+0x1a0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	8af9      	ldrh	r1, [r7, #22]
 8000f14:	2300      	movs	r3, #0
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 ff59 	bl	8001dd4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f22:	e010      	b.n	8000f46 <I2C_Master_ISR_IT+0x1a0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f32:	d003      	beq.n	8000f3c <I2C_Master_ISR_IT+0x196>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSequentialCplt(hi2c);
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 fb33 	bl	80015a0 <I2C_ITMasterSequentialCplt>
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000f3a:	e032      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 fd62 	bl	8001a08 <I2C_ITError>
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000f44:	e02d      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
 8000f46:	e02c      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
      }
    }
  }
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d027      	beq.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d022      	beq.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
  {
    if (hi2c->XferCount == 0U)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d119      	bne.n	8000f9a <I2C_Master_ISR_IT+0x1f4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f74:	d015      	beq.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000f7e:	d108      	bne.n	8000f92 <I2C_Master_ISR_IT+0x1ec>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	6852      	ldr	r2, [r2, #4]
 8000f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	e007      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSequentialCplt(hi2c);
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 fb04 	bl	80015a0 <I2C_ITMasterSequentialCplt>
 8000f98:	e003      	b.n	8000fa2 <I2C_Master_ISR_IT+0x1fc>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 fd33 	bl	8001a08 <I2C_ITError>
    }
  }

  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d008      	beq.n	8000fbe <I2C_Master_ISR_IT+0x218>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <I2C_Master_ISR_IT+0x218>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fb6b 	bl	8001694 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <I2C_Slave_ISR_IT+0x1a>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e0d8      	b.n	800119c <I2C_Slave_ISR_IT+0x1cc>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d045      	beq.n	8001088 <I2C_Slave_ISR_IT+0xb8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d040      	beq.n	8001088 <I2C_Slave_ISR_IT+0xb8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100a:	b29b      	uxth	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d12f      	bne.n	8001070 <I2C_Slave_ISR_IT+0xa0>
    {
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001018:	d004      	beq.n	8001024 <I2C_Slave_ISR_IT+0x54>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001022:	d10a      	bne.n	800103a <I2C_Slave_ISR_IT+0x6a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800102a:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800102c:	2b28      	cmp	r3, #40	; 0x28
 800102e:	d104      	bne.n	800103a <I2C_Slave_ISR_IT+0x6a>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 fc96 	bl	8001964 <I2C_ITListenCplt>
 8001038:	e025      	b.n	8001086 <I2C_Slave_ISR_IT+0xb6>
      }
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001042:	d010      	beq.n	8001066 <I2C_Slave_ISR_IT+0x96>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b29      	cmp	r3, #41	; 0x29
 800104e:	d10a      	bne.n	8001066 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 fd93 	bl	8001b84 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 fadb 	bl	800161a <I2C_ITSlaveSequentialCplt>
 8001064:	e00f      	b.n	8001086 <I2C_Slave_ISR_IT+0xb6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2210      	movs	r2, #16
 800106c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800106e:	e082      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2210      	movs	r2, #16
 8001076:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	f043 0204 	orr.w	r2, r3, #4
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
    if (hi2c->XferCount == 0U)
 8001084:	e077      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
 8001086:	e076      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
    }
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d02e      	beq.n	80010f0 <I2C_Slave_ISR_IT+0x120>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d029      	beq.n	80010f0 <I2C_Slave_ISR_IT+0x120>
  {
    if (hi2c->XferCount > 0U)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d016      	beq.n	80010d4 <I2C_Slave_ISR_IT+0x104>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	1c59      	adds	r1, r3, #1
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	6251      	str	r1, [r2, #36]	; 0x24
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d14a      	bne.n	8001174 <I2C_Slave_ISR_IT+0x1a4>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80010e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010e6:	d045      	beq.n	8001174 <I2C_Slave_ISR_IT+0x1a4>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 fa96 	bl	800161a <I2C_ITSlaveSequentialCplt>
    if ((hi2c->XferCount == 0U) && \
 80010ee:	e041      	b.n	8001174 <I2C_Slave_ISR_IT+0x1a4>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <I2C_Slave_ISR_IT+0x13e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <I2C_Slave_ISR_IT+0x13e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f9c0 	bl	800148c <I2C_ITAddrCplt>
 800110c:	e033      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02e      	beq.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d029      	beq.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001126:	b29b      	uxth	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d016      	beq.n	800115a <I2C_Slave_ISR_IT+0x18a>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	1c58      	adds	r0, r3, #1
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	6248      	str	r0, [r1, #36]	; 0x24
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001150:	3b01      	subs	r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	851a      	strh	r2, [r3, #40]	; 0x28
 8001158:	e00d      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001162:	d003      	beq.n	800116c <I2C_Slave_ISR_IT+0x19c>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d104      	bne.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 fa54 	bl	800161a <I2C_ITSlaveSequentialCplt>
 8001172:	e000      	b.n	8001176 <I2C_Slave_ISR_IT+0x1a6>
    if ((hi2c->XferCount == 0U) && \
 8001174:	bf00      	nop
      }
    }
  }

  /* Check if STOPF is set */
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <I2C_Slave_ISR_IT+0x1c2>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <I2C_Slave_ISR_IT+0x1c2>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fb19 	bl	80017c4 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	827b      	strh	r3, [r7, #18]
  uint32_t xfermode = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <I2C_Master_ISR_DMA+0x22>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e094      	b.n	80012f0 <I2C_Master_ISR_DMA+0x14c>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d016      	beq.n	8001206 <I2C_Master_ISR_DMA+0x62>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d011      	beq.n	8001206 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2210      	movs	r2, #16
 80011e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f043 0204 	orr.w	r2, r3, #4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80011f6:	2112      	movs	r1, #18
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 fe19 	bl	8001e30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fcc0 	bl	8001b84 <I2C_Flush_TXDR>
 8001204:	e06f      	b.n	80012e6 <I2C_Master_ISR_DMA+0x142>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d05c      	beq.n	80012ca <I2C_Master_ISR_DMA+0x126>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d057      	beq.n	80012ca <I2C_Master_ISR_DMA+0x126>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001228:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d045      	beq.n	80012c0 <I2C_Master_ISR_DMA+0x11c>
    {
      /* Recover Slave address */
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001240:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001246:	b29b      	uxth	r3, r3
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	d906      	bls.n	800125a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e007      	b.n	800126a <I2C_Master_ISR_DMA+0xc6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_AUTOEND_MODE;
 8001264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001268:	617b      	str	r3, [r7, #20]
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	b2da      	uxtb	r2, r3
 8001270:	8a79      	ldrh	r1, [r7, #18]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fdab 	bl	8001dd4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001282:	b29a      	uxth	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b22      	cmp	r3, #34	; 0x22
 800129a:	d108      	bne.n	80012ae <I2C_Master_ISR_DMA+0x10a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012aa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80012ac:	e01b      	b.n	80012e6 <I2C_Master_ISR_DMA+0x142>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80012be:	e012      	b.n	80012e6 <I2C_Master_ISR_DMA+0x142>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 fba0 	bl	8001a08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80012c8:	e00d      	b.n	80012e6 <I2C_Master_ISR_DMA+0x142>
    }
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <I2C_Master_ISR_DMA+0x142>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <I2C_Master_ISR_DMA+0x142>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f9d7 	bl	8001694 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <I2C_Slave_ISR_DMA+0x1a>
 800130e:	2302      	movs	r3, #2
 8001310:	e05a      	b.n	80013c8 <I2C_Slave_ISR_DMA+0xd0>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	d02f      	beq.n	8001384 <I2C_Slave_ISR_DMA+0x8c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d02a      	beq.n	8001384 <I2C_Slave_ISR_DMA+0x8c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b21      	cmp	r3, #33	; 0x21
 8001338:	d109      	bne.n	800134e <I2C_Slave_ISR_DMA+0x56>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	e008      	b.n	8001360 <I2C_Slave_ISR_DMA+0x68>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <I2C_Slave_ISR_DMA+0x76>
    {
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	61da      	str	r2, [r3, #28]
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 800136c:	e027      	b.n	80013be <I2C_Slave_ISR_DMA+0xc6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2210      	movs	r2, #16
 8001374:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f043 0204 	orr.w	r2, r3, #4
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 8001382:	e01c      	b.n	80013be <I2C_Slave_ISR_DMA+0xc6>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <I2C_Slave_ISR_DMA+0xaa>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <I2C_Slave_ISR_DMA+0xaa>
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	e00d      	b.n	80013be <I2C_Slave_ISR_DMA+0xc6>
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <I2C_Slave_ISR_DMA+0xc6>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <I2C_Slave_ISR_DMA+0xc6>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 fa03 	bl	80017c4 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	460b      	mov	r3, r1
 80013e4:	813b      	strh	r3, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 fceb 	bl	8001dd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	69b9      	ldr	r1, [r7, #24]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fc48 	bl	8001c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <I2C_RequestMemoryRead+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	2b04      	cmp	r3, #4
 8001414:	d101      	bne.n	800141a <I2C_RequestMemoryRead+0x4a>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e034      	b.n	8001484 <I2C_RequestMemoryRead+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e032      	b.n	8001484 <I2C_RequestMemoryRead+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <I2C_RequestMemoryRead+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	893a      	ldrh	r2, [r7, #8]
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
 800142e:	e01b      	b.n	8001468 <I2C_RequestMemoryRead+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	893a      	ldrh	r2, [r7, #8]
 8001436:	0a12      	lsrs	r2, r2, #8
 8001438:	b292      	uxth	r2, r2
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 fc28 	bl	8001c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <I2C_RequestMemoryRead+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	2b04      	cmp	r3, #4
 8001454:	d101      	bne.n	800145a <I2C_RequestMemoryRead+0x8a>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e014      	b.n	8001484 <I2C_RequestMemoryRead+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e012      	b.n	8001484 <I2C_RequestMemoryRead+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	893a      	ldrh	r2, [r7, #8]
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 fbd6 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <I2C_RequestMemoryRead+0xb2>
  {
    return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e000      	b.n	8001484 <I2C_RequestMemoryRead+0xb4>
  }

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint8_t transferdirection = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  uint16_t slaveaddrcode = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	81bb      	strh	r3, [r7, #12]
  uint16_t ownadd1code = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	817b      	strh	r3, [r7, #10]
  uint16_t ownadd2code = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	813b      	strh	r3, [r7, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80014b2:	2b28      	cmp	r3, #40	; 0x28
 80014b4:	d168      	bne.n	8001588 <I2C_ITAddrCplt+0xfc>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80014d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80014f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d137      	bne.n	800156a <I2C_ITAddrCplt+0xde>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	09db      	lsrs	r3, r3, #7
 80014fe:	b29a      	uxth	r2, r3
 8001500:	89bb      	ldrh	r3, [r7, #12]
 8001502:	4053      	eors	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	f003 0306 	and.w	r3, r3, #6
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11c      	bne.n	8001548 <I2C_ITAddrCplt+0xbc>
      {
        slaveaddrcode = ownadd1code;
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	2b02      	cmp	r3, #2
 8001522:	d139      	bne.n	8001598 <I2C_ITAddrCplt+0x10c>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2208      	movs	r2, #8
 8001530:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800153a:	89ba      	ldrh	r2, [r7, #12]
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fbe2 	bl	8000d0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001546:	e027      	b.n	8001598 <I2C_ITAddrCplt+0x10c>
        slaveaddrcode = ownadd2code;
 8001548:	893b      	ldrh	r3, [r7, #8]
 800154a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800154c:	2104      	movs	r1, #4
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fcdc 	bl	8001f0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800155c:	89ba      	ldrh	r2, [r7, #12]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fbd1 	bl	8000d0a <HAL_I2C_AddrCallback>
}
 8001568:	e016      	b.n	8001598 <I2C_ITAddrCplt+0x10c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800156a:	2104      	movs	r1, #4
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fccd 	bl	8001f0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800157a:	89ba      	ldrh	r2, [r7, #12]
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	4619      	mov	r1, r3
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fbc2 	bl	8000d0a <HAL_I2C_AddrCallback>
}
 8001586:	e007      	b.n	8001598 <I2C_ITAddrCplt+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2208      	movs	r2, #8
 800158e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <I2C_ITMasterSequentialCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b21      	cmp	r3, #33	; 0x21
 80015ba:	d115      	bne.n	80015e8 <I2C_ITMasterSequentialCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2211      	movs	r2, #17
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80015d0:	2101      	movs	r1, #1
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fc9a 	bl	8001f0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fb6a 	bl	8000cba <HAL_I2C_MasterTxCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_MasterRxCpltCallback(hi2c);
  }
}
 80015e6:	e014      	b.n	8001612 <I2C_ITMasterSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2212      	movs	r2, #18
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80015fc:	2102      	movs	r1, #2
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fc84 	bl	8001f0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fb5e 	bl	8000cce <HAL_I2C_MasterRxCpltCallback>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b29      	cmp	r3, #41	; 0x29
 8001634:	d112      	bne.n	800165c <I2C_ITSlaveSequentialCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2228      	movs	r2, #40	; 0x28
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2221      	movs	r2, #33	; 0x21
 8001642:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001644:	2101      	movs	r1, #1
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fc60 	bl	8001f0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the Tx complete callback to inform upper layer of the end of transmit process */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fb44 	bl	8000ce2 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the Rx complete callback to inform upper layer of the end of receive process */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
  }
}
 800165a:	e017      	b.n	800168c <I2C_ITSlaveSequentialCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b2a      	cmp	r3, #42	; 0x2a
 8001666:	d111      	bne.n	800168c <I2C_ITSlaveSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2228      	movs	r2, #40	; 0x28
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2222      	movs	r2, #34	; 0x22
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001676:	2102      	movs	r1, #2
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fc47 	bl	8001f0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fb35 	bl	8000cf6 <HAL_I2C_SlaveRxCpltCallback>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <I2C_ITMasterCplt+0x128>)
 80016b2:	400b      	ands	r3, r1
 80016b4:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <I2C_ITMasterCplt+0x12c>)
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c

  if ((ITFlags & I2C_FLAG_AF) != RESET)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <I2C_ITMasterCplt+0x52>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2210      	movs	r2, #16
 80016d8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f043 0204 	orr.w	r2, r3, #4
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fa4c 	bl	8001b84 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80016ec:	2103      	movs	r1, #3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fc0c 	bl	8001f0c <I2C_Disable_IRQ>

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <I2C_ITMasterCplt+0x74>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b60      	cmp	r3, #96	; 0x60
 8001706:	d106      	bne.n	8001716 <I2C_ITMasterCplt+0x82>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f97a 	bl	8001a08 <I2C_ITError>
      __HAL_UNLOCK(hi2c);

      HAL_I2C_MasterRxCpltCallback(hi2c);
    }
  }
}
 8001714:	e04e      	b.n	80017b4 <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b21      	cmp	r3, #33	; 0x21
 8001720:	d121      	bne.n	8001766 <I2C_ITMasterCplt+0xd2>
    hi2c->State = HAL_I2C_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2220      	movs	r2, #32
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d10b      	bne.n	800174e <I2C_ITMasterCplt+0xba>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff faf7 	bl	8000d3a <HAL_I2C_MemTxCpltCallback>
}
 800174c:	e032      	b.n	80017b4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff faab 	bl	8000cba <HAL_I2C_MasterTxCpltCallback>
}
 8001764:	e026      	b.n	80017b4 <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b22      	cmp	r3, #34	; 0x22
 8001770:	d120      	bne.n	80017b4 <I2C_ITMasterCplt+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d10b      	bne.n	800179e <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fad9 	bl	8000d4e <HAL_I2C_MemRxCpltCallback>
}
 800179c:	e00a      	b.n	80017b4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fa8d 	bl	8000cce <HAL_I2C_MasterRxCpltCallback>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	fe00e800 	.word	0xfe00e800
 80017c0:	ffff0000 	.word	0xffff0000

080017c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2208      	movs	r2, #8
 80017dc:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80017de:	2107      	movs	r1, #7
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fb93 	bl	8001f0c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	6852      	ldr	r2, [r2, #4]
 80017f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <I2C_ITSlaveCplt+0x198>)
 8001802:	400b      	ands	r3, r1
 8001804:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f9bc 	bl	8001b84 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800181a:	d007      	beq.n	800182c <I2C_ITSlaveCplt+0x68>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182a:	d112      	bne.n	8001852 <I2C_ITSlaveCplt+0x8e>
  {
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b21      	cmp	r3, #33	; 0x21
 8001836:	d105      	bne.n	8001844 <I2C_ITSlaveCplt+0x80>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	e004      	b.n	800184e <I2C_ITSlaveCplt+0x8a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	b29b      	uxth	r3, r3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	8553      	strh	r3, [r2, #42]	; 0x2a
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <I2C_ITSlaveCplt+0xa4>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f043 0204 	orr.w	r2, r3, #4
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d020      	beq.n	80018b4 <I2C_ITSlaveCplt+0xf0>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6251      	str	r1, [r2, #36]	; 0x24
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d012      	beq.n	80018b4 <I2C_ITSlaveCplt+0xf0>
    {
      hi2c->XferSize--;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f043 0204 	orr.w	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d010      	beq.n	80018f2 <I2C_ITSlaveCplt+0x12e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f896 	bl	8001a08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b28      	cmp	r3, #40	; 0x28
 80018e6:	d135      	bne.n	8001954 <I2C_ITSlaveCplt+0x190>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f83a 	bl	8001964 <I2C_ITListenCplt>
    __HAL_UNLOCK(hi2c);

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }
}
 80018f0:	e030      	b.n	8001954 <I2C_ITSlaveCplt+0x190>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018fa:	d00e      	beq.n	800191a <I2C_ITSlaveCplt+0x156>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <I2C_ITSlaveCplt+0x19c>)
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fa07 	bl	8000d26 <HAL_I2C_ListenCpltCallback>
}
 8001918:	e01c      	b.n	8001954 <I2C_ITSlaveCplt+0x190>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b22      	cmp	r3, #34	; 0x22
 8001924:	d10b      	bne.n	800193e <I2C_ITSlaveCplt+0x17a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff f9dd 	bl	8000cf6 <HAL_I2C_SlaveRxCpltCallback>
}
 800193c:	e00a      	b.n	8001954 <I2C_ITSlaveCplt+0x190>
    hi2c->State = HAL_I2C_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff f9c7 	bl	8000ce2 <HAL_I2C_SlaveTxCpltCallback>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	fe00e800 	.word	0xfe00e800
 8001960:	ffff0000 	.word	0xffff0000

08001964 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <I2C_ITListenCplt+0xa0>)
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d020      	beq.n	80019dc <I2C_ITListenCplt+0x78>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6251      	str	r1, [r2, #36]	; 0x24
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d012      	beq.n	80019dc <I2C_ITListenCplt+0x78>
    {
      hi2c->XferSize--;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0204 	orr.w	r2, r3, #4
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019dc:	2107      	movs	r1, #7
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fa94 	bl	8001f0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2210      	movs	r2, #16
 80019ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
  HAL_I2C_ListenCpltCallback(hi2c);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f996 	bl	8000d26 <HAL_I2C_ListenCpltCallback>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	ffff0000 	.word	0xffff0000

08001a08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <I2C_ITError+0x170>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b28      	cmp	r3, #40	; 0x28
 8001a3c:	d00b      	beq.n	8001a56 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a44:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001a46:	2b29      	cmp	r3, #41	; 0x29
 8001a48:	d005      	beq.n	8001a56 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a50:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001a52:	2b2a      	cmp	r3, #42	; 0x2a
 8001a54:	d10e      	bne.n	8001a74 <I2C_ITError+0x6c>
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a56:	2103      	movs	r1, #3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fa57 	bl	8001f0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2228      	movs	r2, #40	; 0x28
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a43      	ldr	r2, [pc, #268]	; (8001b7c <I2C_ITError+0x174>)
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
 8001a72:	e013      	b.n	8001a9c <I2C_ITError+0x94>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a74:	2107      	movs	r1, #7
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa48 	bl	8001f0c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b60      	cmp	r3, #96	; 0x60
 8001a86:	d003      	beq.n	8001a90 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aaa:	d11f      	bne.n	8001aec <I2C_ITError+0xe4>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <I2C_ITError+0x178>)
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Abort DMA TX */
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fcfa 	bl	80004ca <HAL_DMA_Abort_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d048      	beq.n	8001b6e <I2C_ITError+0x166>
    {
      /* Call Directly XferAbortCallback function in case of error */
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4798      	blx	r3
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8001aea:	e040      	b.n	8001b6e <I2C_ITError+0x166>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d11f      	bne.n	8001b3c <I2C_ITError+0x134>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0a:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <I2C_ITError+0x178>)
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fcd2 	bl	80004ca <HAL_DMA_Abort_IT>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <I2C_ITError+0x166>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b36:	4610      	mov	r0, r2
 8001b38:	4798      	blx	r3
}
 8001b3a:	e018      	b.n	8001b6e <I2C_ITError+0x166>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b60      	cmp	r3, #96	; 0x60
 8001b46:	d10b      	bne.n	8001b60 <I2C_ITError+0x158>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff f90c 	bl	8000d76 <HAL_I2C_AbortCpltCallback>
}
 8001b5e:	e006      	b.n	8001b6e <I2C_ITError+0x166>
    __HAL_UNLOCK(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff f8fa 	bl	8000d62 <HAL_I2C_ErrorCallback>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	ffff0000 	.word	0xffff0000
 8001b7c:	08000fd1 	.word	0x08000fd1
 8001b80:	08001bcd 	.word	0x08001bcd

08001b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d103      	bne.n	8001ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d007      	beq.n	8001bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	6992      	ldr	r2, [r2, #24]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	619a      	str	r2, [r3, #24]
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	6852      	ldr	r2, [r2, #4]
 8001be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be8:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	2200      	movs	r2, #0
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b60      	cmp	r3, #96	; 0x60
 8001c04:	d107      	bne.n	8001c16 <I2C_DMAAbort+0x4a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff f8b1 	bl	8000d76 <HAL_I2C_AbortCpltCallback>
  else
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8001c14:	e002      	b.n	8001c1c <I2C_DMAAbort+0x50>
    HAL_I2C_ErrorCallback(hi2c);
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff f8a3 	bl	8000d62 <HAL_I2C_ErrorCallback>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e01c      	b.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d018      	beq.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c44:	f7fe fb00 	bl	8000248 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad2      	subs	r2, r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d90d      	bls.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e00f      	b.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	401a      	ands	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d0d3      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca4:	e02c      	b.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f834 	bl	8001d18 <I2C_IsAcknowledgeFailed>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e02a      	b.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc0:	d01e      	beq.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cc8:	f7fe fabe 	bl	8000248 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1ad2      	subs	r2, r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d913      	bls.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f043 0220 	orr.w	r2, r3, #32
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e007      	b.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d1cb      	bne.n	8001ca6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d148      	bne.n	8001dc4 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d32:	e01c      	b.n	8001d6e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3a:	d018      	beq.n	8001d6e <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <I2C_IsAcknowledgeFailed+0x3a>
 8001d42:	f7fe fa81 	bl	8000248 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d90d      	bls.n	8001d6e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e02b      	b.n	8001dc6 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d1db      	bne.n	8001d34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fef9 	bl	8001b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <I2C_IsAcknowledgeFailed+0xb8>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2204      	movs	r2, #4
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	fe00e800 	.word	0xfe00e800

08001dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	4613      	mov	r3, r2
 8001de4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <I2C_TransferConfig+0x58>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e00:	7a7b      	ldrb	r3, [r7, #9]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	605a      	str	r2, [r3, #4]
}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	fc009800 	.word	0xfc009800

08001e30 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <I2C_Enable_IRQ+0xd4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001e4e:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <I2C_Enable_IRQ+0xd8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d124      	bne.n	8001e9e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001e64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	f003 0311 	and.w	r3, r3, #17
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d103      	bne.n	8001e78 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001e76:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	f003 0312 	and.w	r3, r3, #18
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d103      	bne.n	8001e8a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	f003 0312 	and.w	r3, r3, #18
 8001e90:	2b12      	cmp	r3, #18
 8001e92:	d128      	bne.n	8001ee6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001e9c:	e023      	b.n	8001ee6 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001eae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8001ec0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8001ed2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	f003 0312 	and.w	r3, r3, #18
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d103      	bne.n	8001ee6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	6811      	ldr	r1, [r2, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	080011a5 	.word	0x080011a5
 8001f08:	080012f9 	.word	0x080012f9

08001f0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001f2c:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f3a:	2b28      	cmp	r3, #40	; 0x28
 8001f3c:	d003      	beq.n	8001f46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00f      	beq.n	8001f70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001f56:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f64:	2b28      	cmp	r3, #40	; 0x28
 8001f66:	d003      	beq.n	8001f70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	f003 0311 	and.w	r3, r3, #17
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d103      	bne.n	8001f94 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	f003 0312 	and.w	r3, r3, #18
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d103      	bne.n	8001fa6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	f003 0312 	and.w	r3, r3, #18
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d103      	bne.n	8001fb8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6811      	ldr	r1, [r2, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d138      	bne.n	8002060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e032      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800202a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	d139      	bne.n	80020fc <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002092:	2302      	movs	r3, #2
 8002094:	e033      	b.n	80020fe <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2224      	movs	r2, #36	; 0x24
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002112:	af00      	add	r7, sp, #0
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 816e 	beq.w	800240a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800212e:	4bb5      	ldr	r3, [pc, #724]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d00c      	beq.n	8002154 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800213a:	4bb2      	ldr	r3, [pc, #712]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d15a      	bne.n	80021fc <HAL_RCC_OscConfig+0xf0>
 8002146:	4baf      	ldr	r3, [pc, #700]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d153      	bne.n	80021fc <HAL_RCC_OscConfig+0xf0>
 8002154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002158:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002168:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <HAL_RCC_OscConfig+0x7a>
 8002180:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0xa6>
 8002186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800219a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021a2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80021ba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80021c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b252      	sxtb	r2, r2
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	b252      	sxtb	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 810f 	beq.w	8002408 <HAL_RCC_OscConfig+0x2fc>
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8109 	bne.w	8002408 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f000 be6b 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x10a>
 8002208:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800220a:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e030      	b.n	8002278 <HAL_RCC_OscConfig+0x16c>
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x12e>
 8002220:	4a78      	ldr	r2, [pc, #480]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4a75      	ldr	r2, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e01e      	b.n	8002278 <HAL_RCC_OscConfig+0x16c>
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x154>
 8002246:	4a6f      	ldr	r2, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002248:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4a6c      	ldr	r2, [pc, #432]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x16c>
 8002260:	4a68      	ldr	r2, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800226e:	4b65      	ldr	r3, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002278:	4962      	ldr	r1, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800227a:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f023 020f 	bic.w	r2, r3, #15
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4313      	orrs	r3, r2
 800228a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d05a      	beq.n	800234c <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fd ffd7 	bl	8000248 <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fd ffd2 	bl	8000248 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 be0e 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 80022b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ba:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80022ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1dc>
 80022e2:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x208>
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002304:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002310:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002318:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800231c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8002328:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b252      	sxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b252      	sxtb	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0aa      	beq.n	80022a0 <HAL_RCC_OscConfig+0x194>
 800234a:	e05e      	b.n	800240a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fd ff7c 	bl	8000248 <HAL_GetTick>
 8002350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002356:	f7fd ff77 	bl	8000248 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d902      	bls.n	800236c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	f000 bdb3 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 800236c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002370:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002380:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d102      	bne.n	800239e <HAL_RCC_OscConfig+0x292>
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x2be>
 800239e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80023b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCC_OscConfig+0x2f8>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80023d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80023de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023e2:	fab2 f282 	clz	r2, r2
 80023e6:	b252      	sxtb	r2, r2
 80023e8:	f042 0220 	orr.w	r2, r2, #32
 80023ec:	b252      	sxtb	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1aa      	bne.n	8002356 <HAL_RCC_OscConfig+0x24a>
 8002400:	e003      	b.n	800240a <HAL_RCC_OscConfig+0x2fe>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8170 	beq.w	80026fa <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800241a:	4bd0      	ldr	r3, [pc, #832]	; (800275c <HAL_RCC_OscConfig+0x650>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002426:	4bcd      	ldr	r3, [pc, #820]	; (800275c <HAL_RCC_OscConfig+0x650>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d16d      	bne.n	800250e <HAL_RCC_OscConfig+0x402>
 8002432:	4bca      	ldr	r3, [pc, #808]	; (800275c <HAL_RCC_OscConfig+0x650>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d167      	bne.n	800250e <HAL_RCC_OscConfig+0x402>
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002450:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x362>
 8002468:	4bbc      	ldr	r3, [pc, #752]	; (800275c <HAL_RCC_OscConfig+0x650>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e013      	b.n	8002496 <HAL_RCC_OscConfig+0x38a>
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002486:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002492:	4bb2      	ldr	r3, [pc, #712]	; (800275c <HAL_RCC_OscConfig+0x650>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2202      	movs	r2, #2
 8002498:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800249c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80024a0:	fa92 f2a2 	rbit	r2, r2
 80024a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80024a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b252      	sxtb	r2, r2
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	b252      	sxtb	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_RCC_OscConfig+0x3ce>
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d002      	beq.n	80024da <HAL_RCC_OscConfig+0x3ce>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f000 bcfc 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	48a0      	ldr	r0, [pc, #640]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80024dc:	4b9f      	ldr	r3, [pc, #636]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6959      	ldr	r1, [r3, #20]
 80024ea:	23f8      	movs	r3, #248	; 0xf8
 80024ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80024fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250c:	e0f5      	b.n	80026fa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8085 	beq.w	8002624 <HAL_RCC_OscConfig+0x518>
 800251a:	2301      	movs	r3, #1
 800251c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800252c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	2301      	movs	r3, #1
 8002542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fd fe80 	bl	8000248 <HAL_GetTick>
 8002548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7fd fe7b 	bl	8000248 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bcb7 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8002576:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x488>
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x650>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x4b0>
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80025c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80025ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b252      	sxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b252      	sxtb	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ae      	beq.n	800254e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	485a      	ldr	r0, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80025f2:	4b5a      	ldr	r3, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6959      	ldr	r1, [r3, #20]
 8002600:	23f8      	movs	r3, #248	; 0xf8
 8002602:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002612:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	6003      	str	r3, [r0, #0]
 8002622:	e06a      	b.n	80026fa <HAL_RCC_OscConfig+0x5ee>
 8002624:	2301      	movs	r3, #1
 8002626:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002636:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002642:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	461a      	mov	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fd fdfb 	bl	8000248 <HAL_GetTick>
 8002652:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fd fdf6 	bl	8000248 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d902      	bls.n	800266e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	f000 bc32 	b.w	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 800266e:	2302      	movs	r3, #2
 8002670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_RCC_OscConfig+0x592>
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x650>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	e013      	b.n	80026c6 <HAL_RCC_OscConfig+0x5ba>
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x650>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2202      	movs	r2, #2
 80026c8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80026cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80026d0:	fa92 f2a2 	rbit	r2, r2
 80026d4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80026d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b252      	sxtb	r2, r2
 80026e2:	f042 0220 	orr.w	r2, r2, #32
 80026e6:	b252      	sxtb	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f002 021f 	and.w	r2, r2, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ae      	bne.n	8002658 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80d8 	beq.w	80028ba <HAL_RCC_OscConfig+0x7ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d067      	beq.n	80027e4 <HAL_RCC_OscConfig+0x6d8>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8002726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x654>)
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	461a      	mov	r2, r3
 8002738:	2301      	movs	r3, #1
 800273a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fd fd84 	bl	8000248 <HAL_GetTick>
 8002740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002744:	e00e      	b.n	8002764 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7fd fd7f 	bl	8000248 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d906      	bls.n	8002764 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e3bb      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	10908120 	.word	0x10908120
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800277c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002780:	fa93 f2a3 	rbit	r2, r3
 8002784:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80027a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4ba5      	ldr	r3, [pc, #660]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80027a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027aa:	2102      	movs	r1, #2
 80027ac:	6019      	str	r1, [r3, #0]
 80027ae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f1a3 	rbit	r1, r3
 80027b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027bc:	6019      	str	r1, [r3, #0]
  return(result);
 80027be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0b1      	beq.n	8002746 <HAL_RCC_OscConfig+0x63a>
 80027e2:	e06a      	b.n	80028ba <HAL_RCC_OscConfig+0x7ae>
 80027e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027fa:	601a      	str	r2, [r3, #0]
  return(result);
 80027fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002800:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <HAL_RCC_OscConfig+0x930>)
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	2300      	movs	r3, #0
 8002812:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002814:	f7fd fd18 	bl	8000248 <HAL_GetTick>
 8002818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	e009      	b.n	8002832 <HAL_RCC_OscConfig+0x726>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281e:	f7fd fd13 	bl	8000248 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e34f      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002832:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002836:	2202      	movs	r2, #2
 8002838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800284e:	2202      	movs	r2, #2
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002866:	2202      	movs	r2, #2
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	fa93 f2a3 	rbit	r2, r3
 8002874:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 800287c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002882:	2102      	movs	r1, #2
 8002884:	6019      	str	r1, [r3, #0]
 8002886:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f1a3 	rbit	r1, r3
 8002890:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002894:	6019      	str	r1, [r3, #0]
  return(result);
 8002896:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1b1      	bne.n	800281e <HAL_RCC_OscConfig+0x712>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8159 	beq.w	8002b7c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d112      	bne.n	8002902 <HAL_RCC_OscConfig+0x7f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_OscConfig+0x934>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x838>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4a4c      	ldr	r2, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x934>)
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCC_OscConfig+0x934>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fd fc95 	bl	8000248 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	e009      	b.n	8002938 <HAL_RCC_OscConfig+0x82c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002924:	f7fd fc90 	bl	8000248 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x82c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e2cc      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x934>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x818>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x850>
 800294e:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	e02f      	b.n	80029bc <HAL_RCC_OscConfig+0x8b0>
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x874>
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002968:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0x8b0>
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x898>
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 800298c:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0x8b0>
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d06b      	beq.n	8002a9e <HAL_RCC_OscConfig+0x992>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fd fc3f 	bl	8000248 <HAL_GetTick>
 80029ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x8dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fd fc3a 	bl	8000248 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x8dc>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e274      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 80029e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a04:	2202      	movs	r2, #2
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a16:	601a      	str	r2, [r3, #0]
  return(result);
 8002a18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d108      	bne.n	8002a44 <HAL_RCC_OscConfig+0x938>
 8002a32:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <HAL_RCC_OscConfig+0x92c>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	e013      	b.n	8002a60 <HAL_RCC_OscConfig+0x954>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	10908120 	.word	0x10908120
 8002a40:	40007000 	.word	0x40007000
 8002a44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4bbb      	ldr	r3, [pc, #748]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a64:	2102      	movs	r1, #2
 8002a66:	6011      	str	r1, [r2, #0]
 8002a68:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	fa92 f1a2 	rbit	r1, r2
 8002a72:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a76:	6011      	str	r1, [r2, #0]
  return(result);
 8002a78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b252      	sxtb	r2, r2
 8002a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a88:	b252      	sxtb	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d099      	beq.n	80029d0 <HAL_RCC_OscConfig+0x8c4>
 8002a9c:	e064      	b.n	8002b68 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fd fbd3 	bl	8000248 <HAL_GetTick>
 8002aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x9b4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fd fbce 	bl	8000248 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x9b4>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e208      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	fa93 f2a3 	rbit	r2, r3
 8002aea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002aee:	601a      	str	r2, [r3, #0]
  return(result);
 8002af0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002af4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0xa04>
 8002b0a:	4b90      	ldr	r3, [pc, #576]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	e00d      	b.n	8002b2c <HAL_RCC_OscConfig+0xa20>
 8002b10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b14:	2202      	movs	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002b30:	2102      	movs	r1, #2
 8002b32:	6011      	str	r1, [r2, #0]
 8002b34:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	fa92 f1a2 	rbit	r1, r2
 8002b3e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b42:	6011      	str	r1, [r2, #0]
  return(result);
 8002b44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b252      	sxtb	r2, r2
 8002b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b54:	b252      	sxtb	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f002 021f 	and.w	r2, r2, #31
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d19f      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x99c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4a76      	ldr	r2, [pc, #472]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002b72:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 81a4 	beq.w	8002ed0 <HAL_RCC_OscConfig+0xdc4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b70      	ldr	r3, [pc, #448]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	f000 819b 	beq.w	8002ecc <HAL_RCC_OscConfig+0xdc0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	f040 8113 	bne.w	8002dc8 <HAL_RCC_OscConfig+0xcbc>
 8002ba2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002bba:	601a      	str	r2, [r3, #0]
  return(result);
 8002bbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002bc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fd fb37 	bl	8000248 <HAL_GetTick>
 8002bda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	e009      	b.n	8002bf4 <HAL_RCC_OscConfig+0xae8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fd fb32 	bl	8000248 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0xae8>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e16e      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002bf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c0c:	601a      	str	r2, [r3, #0]
  return(result);
 8002c0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0xb22>
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	e01b      	b.n	8002c66 <HAL_RCC_OscConfig+0xb5a>
 8002c2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	fa93 f2a3 	rbit	r2, r3
 8002c42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fa92 f1a2 	rbit	r1, r2
 8002c7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c7e:	6011      	str	r1, [r2, #0]
  return(result);
 8002c80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	fab2 f282 	clz	r2, r2
 8002c8a:	b252      	sxtb	r2, r2
 8002c8c:	f042 0220 	orr.w	r2, r2, #32
 8002c90:	b252      	sxtb	r2, r2
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d19d      	bne.n	8002be0 <HAL_RCC_OscConfig+0xad4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca4:	4829      	ldr	r0, [pc, #164]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	6043      	str	r3, [r0, #4]
 8002cc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cd8:	601a      	str	r2, [r3, #0]
  return(result);
 8002cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cde:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd faa8 	bl	8000248 <HAL_GetTick>
 8002cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	e009      	b.n	8002d12 <HAL_RCC_OscConfig+0xc06>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fd faa3 	bl	8000248 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xc06>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0df      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d2a:	601a      	str	r2, [r3, #0]
  return(result);
 8002d2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d104      	bne.n	8002d50 <HAL_RCC_OscConfig+0xc44>
 8002d46:	4b01      	ldr	r3, [pc, #4]	; (8002d4c <HAL_RCC_OscConfig+0xc40>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e01d      	b.n	8002d88 <HAL_RCC_OscConfig+0xc7c>
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCC_OscConfig+0xdd0>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d90:	6011      	str	r1, [r2, #0]
 8002d92:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	fa92 f1a2 	rbit	r1, r2
 8002d9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002da0:	6011      	str	r1, [r2, #0]
  return(result);
 8002da2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b252      	sxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b252      	sxtb	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f002 021f 	and.w	r2, r2, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d09b      	beq.n	8002cfe <HAL_RCC_OscConfig+0xbf2>
 8002dc6:	e083      	b.n	8002ed0 <HAL_RCC_OscConfig+0xdc4>
 8002dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002de0:	601a      	str	r2, [r3, #0]
  return(result);
 8002de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002de6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fd fa24 	bl	8000248 <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e04:	e009      	b.n	8002e1a <HAL_RCC_OscConfig+0xd0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fd fa1f 	bl	8000248 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xd0e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e05b      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
 8002e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e32:	601a      	str	r2, [r3, #0]
  return(result);
 8002e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_OscConfig+0xd48>
 8002e4e:	4b23      	ldr	r3, [pc, #140]	; (8002edc <HAL_RCC_OscConfig+0xdd0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	e01b      	b.n	8002e8c <HAL_RCC_OscConfig+0xd80>
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f2a3 	rbit	r2, r3
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f2a3 	rbit	r2, r3
 8002e82:	f107 0318 	add.w	r3, r7, #24
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCC_OscConfig+0xdd0>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f107 0214 	add.w	r2, r7, #20
 8002e90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	f107 0214 	add.w	r2, r7, #20
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	fa92 f1a2 	rbit	r1, r2
 8002ea0:	f107 0210 	add.w	r2, r7, #16
 8002ea4:	6011      	str	r1, [r2, #0]
  return(result);
 8002ea6:	f107 0210 	add.w	r2, r7, #16
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b252      	sxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b252      	sxtb	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f002 021f 	and.w	r2, r2, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d19d      	bne.n	8002e06 <HAL_RCC_OscConfig+0xcfa>
 8002eca:	e001      	b.n	8002ed0 <HAL_RCC_OscConfig+0xdc4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0xdc6>
    }
  }
  
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b09e      	sub	sp, #120	; 0x78
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002eee:	4ba7      	ldr	r3, [pc, #668]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0207 	and.w	r2, r3, #7
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d210      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	49a3      	ldr	r1, [pc, #652]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 8002efe:	4ba3      	ldr	r3, [pc, #652]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0207 	bic.w	r2, r3, #7
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f0c:	4b9f      	ldr	r3, [pc, #636]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0207 	and.w	r2, r3, #7
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e175      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2a:	4999      	ldr	r1, [pc, #612]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8002f2c:	4b98      	ldr	r3, [pc, #608]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8109 	beq.w	800315c <HAL_RCC_ClockConfig+0x27c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d13d      	bne.n	8002fce <HAL_RCC_ClockConfig+0xee>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x9c>
 8002f76:	4b86      	ldr	r3, [pc, #536]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e00f      	b.n	8002f9c <HAL_RCC_ClockConfig+0xbc>
 8002f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	667b      	str	r3, [r7, #100]	; 0x64
 8002f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f98:	4b7d      	ldr	r3, [pc, #500]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002faa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b252      	sxtb	r2, r2
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	b252      	sxtb	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f002 021f 	and.w	r2, r2, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d17d      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e11d      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d13d      	bne.n	8003052 <HAL_RCC_ClockConfig+0x172>
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_ClockConfig+0x120>
 8002ffa:	4b65      	ldr	r3, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e00f      	b.n	8003020 <HAL_RCC_ClockConfig+0x140>
 8003000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
 800300e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301c:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003024:	63ba      	str	r2, [r7, #56]	; 0x38
 8003026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800302e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b252      	sxtb	r2, r2
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	b252      	sxtb	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f002 021f 	and.w	r2, r2, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d13b      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0db      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
 8003052:	2302      	movs	r3, #2
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_RCC_ClockConfig+0x19a>
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e00d      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
 800307a:	2302      	movs	r3, #2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	2302      	movs	r3, #2
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2202      	movs	r2, #2
 8003098:	61ba      	str	r2, [r7, #24]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	617a      	str	r2, [r7, #20]
  return(result);
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b252      	sxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b252      	sxtb	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f002 021f 	and.w	r2, r2, #31
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0a1      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4932      	ldr	r1, [pc, #200]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 0203 	bic.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fd f8b6 	bl	8000248 <HAL_GetTick>
 80030dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d112      	bne.n	800310c <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fd f8ae 	bl	8000248 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e085      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x208>
 800310a:	e027      	b.n	800315c <HAL_RCC_ClockConfig+0x27c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11d      	bne.n	8003150 <HAL_RCC_ClockConfig+0x270>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003114:	e00a      	b.n	800312c <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fd f897 	bl	8000248 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e06e      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_ClockConfig+0x236>
 8003138:	e010      	b.n	800315c <HAL_RCC_ClockConfig+0x27c>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313a:	f7fd f885 	bl	8000248 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0x270>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e05c      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_ClockConfig+0x2b0>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ee      	bne.n	800313a <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0207 	and.w	r2, r3, #7
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d914      	bls.n	8003194 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 0207 	bic.w	r2, r3, #7
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_ClockConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e03e      	b.n	800320a <HAL_RCC_ClockConfig+0x32a>
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	491c      	ldr	r1, [pc, #112]	; (8003214 <HAL_RCC_ClockConfig+0x334>)
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <HAL_RCC_ClockConfig+0x334>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4915      	ldr	r1, [pc, #84]	; (8003214 <HAL_RCC_ClockConfig+0x334>)
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_RCC_ClockConfig+0x334>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031d2:	f000 f825 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x334>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	23f0      	movs	r3, #240	; 0xf0
 80031e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_RCC_ClockConfig+0x338>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	fa21 f303 	lsr.w	r3, r1, r3
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_RCC_ClockConfig+0x33c>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fc fff6 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3778      	adds	r7, #120	; 0x78
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	080069c4 	.word	0x080069c4
 800321c:	20000000 	.word	0x20000000

08003220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d002      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x30>
 800324a:	2b08      	cmp	r3, #8
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x36>
 800324e:	e03c      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003252:	623b      	str	r3, [r7, #32]
      break;
 8003254:	e03c      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800325c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003260:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	607b      	str	r3, [r7, #4]
  return(result);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	230f      	movs	r3, #15
 8003284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	60fb      	str	r3, [r7, #12]
  return(result);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e004      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a0c      	ldr	r2, [pc, #48]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	623b      	str	r3, [r7, #32]
      break;
 80032c8:	e002      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032cc:	623b      	str	r3, [r7, #32]
      break;
 80032ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	372c      	adds	r7, #44	; 0x2c
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	007a1200 	.word	0x007a1200
 80032e8:	080069a4 	.word	0x080069a4
 80032ec:	080069b4 	.word	0x080069b4
 80032f0:	003d0900 	.word	0x003d0900

080032f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_RCC_GetHCLKFreq+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003312:	f7ff ffef 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8003316:	4601      	mov	r1, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003320:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003324:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	603b      	str	r3, [r7, #0]
  return(result);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_RCC_GetPCLK1Freq+0x40>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	080069d4 	.word	0x080069d4

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003356:	f7ff ffcd 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 800335a:	4601      	mov	r1, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003364:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003368:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	603b      	str	r3, [r7, #0]
  return(result);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x40>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	080069d4 	.word	0x080069d4

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b092      	sub	sp, #72	; 0x48
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80d6 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b8:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10e      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033c6:	4b4a      	ldr	r3, [pc, #296]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	61d3      	str	r3, [r2, #28]
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4a41      	ldr	r2, [pc, #260]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fc ff25 	bl	8000248 <HAL_GetTick>
 80033fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fc ff21 	bl	8000248 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e168      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003420:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8083 	beq.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800343a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343c:	429a      	cmp	r2, r3
 800343e:	d07b      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	461a      	mov	r2, r3
 800348a:	2300      	movs	r3, #0
 800348c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04c      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fc fed3 	bl	8000248 <HAL_GetTick>
 80034a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fc fecf 	bl	8000248 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e114      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80034bc:	2302      	movs	r3, #2
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	2302      	movs	r3, #2
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80034d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d108      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80034ea:	4b01      	ldr	r3, [pc, #4]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	e00d      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x178>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	10908100 	.word	0x10908100
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2202      	movs	r2, #2
 800350e:	613a      	str	r2, [r7, #16]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	60fa      	str	r2, [r7, #12]
  return(result);
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b252      	sxtb	r2, r2
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	b252      	sxtb	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0b6      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003538:	496d      	ldr	r1, [pc, #436]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353a:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800354a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003554:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356a:	4961      	ldr	r1, [pc, #388]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356c:	4b60      	ldr	r3, [pc, #384]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f023 0203 	bic.w	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003588:	4959      	ldr	r1, [pc, #356]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358a:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4952      	ldr	r1, [pc, #328]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a8:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c4:	494a      	ldr	r1, [pc, #296]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c6:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f023 0210 	bic.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035e2:	4943      	ldr	r1, [pc, #268]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003600:	493b      	ldr	r1, [pc, #236]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f023 0220 	bic.w	r2, r3, #32
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4313      	orrs	r3, r2
 8003610:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800361e:	4934      	ldr	r1, [pc, #208]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800363c:	492c      	ldr	r1, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800365a:	4925      	ldr	r1, [pc, #148]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003678:	491d      	ldr	r1, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	4313      	orrs	r3, r2
 8003688:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003696:	4916      	ldr	r1, [pc, #88]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036b4:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4313      	orrs	r3, r2
 80036c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036d2:	4907      	ldr	r1, [pc, #28]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	4313      	orrs	r3, r2
 80036e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3748      	adds	r7, #72	; 0x48
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e082      	b.n	800380c <HAL_SPI_Init+0x118>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f002 ffc3 	bl	80066ac <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003746:	d902      	bls.n	800374e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e002      	b.n	8003754 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800374e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003752:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800375c:	d007      	beq.n	800376e <HAL_SPI_Init+0x7a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003766:	d002      	beq.n	800376e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377e:	d903      	bls.n	8003788 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
 8003786:	e002      	b.n	800378e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6851      	ldr	r1, [r2, #4]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6912      	ldr	r2, [r2, #16]
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6952      	ldr	r2, [r2, #20]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6992      	ldr	r2, [r2, #24]
 80037ac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	69d2      	ldr	r2, [r2, #28]
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a12      	ldr	r2, [r2, #32]
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6992      	ldr	r2, [r2, #24]
 80037ce:	0c12      	lsrs	r2, r2, #16
 80037d0:	f002 0104 	and.w	r1, r2, #4
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	4311      	orrs	r1, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	69d2      	ldr	r2, [r2, #28]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_SPI_Transmit+0x26>
 8003836:	2302      	movs	r3, #2
 8003838:	e13e      	b.n	8003ab8 <HAL_SPI_Transmit+0x2a4>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003842:	f7fc fd01 	bl	8000248 <HAL_GetTick>
 8003846:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d002      	beq.n	800385a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003858:	e125      	b.n	8003aa6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SPI_Transmit+0x52>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386a:	e11c      	b.n	8003aa6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2203      	movs	r2, #3
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b6:	d107      	bne.n	80038c8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d007      	beq.n	80038e6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ee:	d947      	bls.n	8003980 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_SPI_Transmit+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d138      	bne.n	8003974 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	3302      	adds	r3, #2
 8003910:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003920:	e028      	b.n	8003974 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d10f      	bne.n	8003950 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	8812      	ldrh	r2, [r2, #0]
 8003938:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3302      	adds	r3, #2
 800393e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394e:	e011      	b.n	8003974 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_SPI_Transmit+0x15a>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d00a      	beq.n	8003974 <HAL_SPI_Transmit+0x160>
 800395e:	f7fc fc73 	bl	8000248 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003972:	e098      	b.n	8003aa6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1d1      	bne.n	8003922 <HAL_SPI_Transmit+0x10e>
 800397e:	e072      	b.n	8003a66 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_SPI_Transmit+0x17e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d164      	bne.n	8003a5c <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d90f      	bls.n	80039bc <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	8812      	ldrh	r2, [r2, #0]
 80039a4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3302      	adds	r3, #2
 80039aa:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b02      	subs	r3, #2
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ba:	e04f      	b.n	8003a5c <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f103 020c 	add.w	r2, r3, #12
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039dc:	e03e      	b.n	8003a5c <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d125      	bne.n	8003a38 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d90f      	bls.n	8003a16 <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	8812      	ldrh	r2, [r2, #0]
 80039fe:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3302      	adds	r3, #2
 8003a04:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b02      	subs	r3, #2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a14:	e022      	b.n	8003a5c <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f103 020c 	add.w	r2, r3, #12
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1c59      	adds	r1, r3, #1
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a36:	e011      	b.n	8003a5c <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_SPI_Transmit+0x242>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d00a      	beq.n	8003a5c <HAL_SPI_Transmit+0x248>
 8003a46:	f7fc fbff 	bl	8000248 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a5a:	e024      	b.n	8003aa6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1bb      	bne.n	80039de <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fc86 	bl	800437c <SPI_EndRxTxTransaction>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae0:	d112      	bne.n	8003b08 <HAL_SPI_Receive+0x48>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2204      	movs	r2, #4
 8003aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8ff 	bl	8003d02 <HAL_SPI_TransmitReceive>
 8003b04:	4603      	mov	r3, r0
 8003b06:	e0f8      	b.n	8003cfa <HAL_SPI_Receive+0x23a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_SPI_Receive+0x56>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0f1      	b.n	8003cfa <HAL_SPI_Receive+0x23a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1e:	f7fc fb93 	bl	8000248 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b34:	e0d8      	b.n	8003ce8 <HAL_SPI_Receive+0x228>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Receive+0x82>
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b46:	e0cf      	b.n	8003ce8 <HAL_SPI_Receive+0x228>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b92:	d908      	bls.n	8003ba6 <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	6852      	ldr	r2, [r2, #4]
 8003b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	e007      	b.n	8003bb6 <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbe:	d107      	bne.n	8003bd0 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d007      	beq.n	8003bee <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf6:	d860      	bhi.n	8003cba <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bf8:	e02c      	b.n	8003c54 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d113      	bne.n	8003c30 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c2e:	e011      	b.n	8003c54 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_SPI_Receive+0x18e>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3c:	d00a      	beq.n	8003c54 <HAL_SPI_Receive+0x194>
 8003c3e:	f7fc fb03 	bl	8000248 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c52:	e049      	b.n	8003ce8 <HAL_SPI_Receive+0x228>
    while (hspi->RxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cc      	bne.n	8003bfa <HAL_SPI_Receive+0x13a>
 8003c60:	e031      	b.n	8003cc6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d112      	bne.n	8003c96 <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3302      	adds	r3, #2
 8003c80:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c94:	e011      	b.n	8003cba <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_SPI_Receive+0x1f4>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d00a      	beq.n	8003cba <HAL_SPI_Receive+0x1fa>
 8003ca4:	f7fc fad0 	bl	8000248 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cb8:	e016      	b.n	8003ce8 <HAL_SPI_Receive+0x228>
    while (hspi->RxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cd      	bne.n	8003c62 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fafe 	bl	80042cc <SPI_EndRxTransaction>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_SPI_TransmitReceive+0x32>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e1e1      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x3f6>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3c:	f7fc fa84 	bl	8000248 <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d00e      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x74>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d106      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x6c>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d003      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d74:	e1b6      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x86>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x86>
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d8e:	e1a9      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d003      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2205      	movs	r2, #5
 8003da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	887a      	ldrh	r2, [r7, #2]
 8003dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	887a      	ldrh	r2, [r7, #2]
 8003dca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de6:	d805      	bhi.n	8003df4 <HAL_SPI_TransmitReceive+0xf2>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d908      	bls.n	8003e06 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	6852      	ldr	r2, [r2, #4]
 8003dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e007      	b.n	8003e16 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	6852      	ldr	r2, [r2, #4]
 8003e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d007      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3c:	d975      	bls.n	8003f2a <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x14e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d160      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	8812      	ldrh	r2, [r2, #0]
 8003e58:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6e:	e050      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01c      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x1ae>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x1ae>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d110      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01a      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x1f0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d113      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3302      	adds	r3, #2
 8003eda:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef8:	d00b      	beq.n	8003f12 <HAL_SPI_TransmitReceive+0x210>
 8003efa:	f7fc f9a5 	bl	8000248 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d303      	bcc.n	8003f12 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f10:	e0e8      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1a9      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x16e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1a3      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x16e>
 8003f28:	e0ca      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_SPI_TransmitReceive+0x23c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	f040 80b4 	bne.w	80040a6 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d90f      	bls.n	8003f68 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3302      	adds	r3, #2
 8003f56:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b02      	subs	r3, #2
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f66:	e09e      	b.n	80040a6 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f103 020c 	add.w	r2, r3, #12
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f88:	e08d      	b.n	80040a6 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d032      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x2f4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02d      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x2f4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d126      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d90f      	bls.n	8003fd2 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b02      	subs	r3, #2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd0:	e00f      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f103 020c 	add.w	r2, r3, #12
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	1c59      	adds	r1, r3, #1
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d041      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x384>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d13a      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d920      	bls.n	800405e <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3302      	adds	r3, #2
 800402c:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b02      	subs	r3, #2
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d81a      	bhi.n	8004082 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	6852      	ldr	r2, [r2, #4]
 8004056:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	e011      	b.n	8004082 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	320c      	adds	r2, #12
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408c:	d00b      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x3a4>
 800408e:	f7fc f8db 	bl	8000248 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	429a      	cmp	r2, r3
 800409c:	d303      	bcc.n	80040a6 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040a4:	e01e      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f af6c 	bne.w	8003f8a <HAL_SPI_TransmitReceive+0x288>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f47f af65 	bne.w	8003f8a <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f959 	bl	800437c <SPI_EndRxTxTransaction>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800410e:	b2db      	uxtb	r3, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412a:	e04c      	b.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004132:	d048      	beq.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800413a:	f7fc f885 	bl	8000248 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d33d      	bcc.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	6852      	ldr	r2, [r2, #4]
 8004154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004162:	d111      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416c:	d004      	beq.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d107      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004190:	d10f      	bne.n	80041b2 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00e      	b.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	401a      	ands	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d101      	bne.n	80041da <SPI_WaitFlagStateUntilTimeout+0xbe>
 80041d6:	2201      	movs	r2, #1
 80041d8:	e000      	b.n	80041dc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80041da:	2200      	movs	r2, #0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d1a4      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80041fa:	e05a      	b.n	80042b2 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004202:	d109      	bne.n	8004218 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004216:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421e:	d048      	beq.n	80042b2 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8004226:	f7fc f80f 	bl	8000248 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d33d      	bcc.n	80042b2 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6852      	ldr	r2, [r2, #4]
 8004240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d111      	bne.n	8004274 <SPI_WaitFifoStateUntilTimeout+0x88>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	d004      	beq.n	8004264 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d107      	bne.n	8004274 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d10f      	bne.n	800429e <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e008      	b.n	80042c4 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d19c      	bne.n	80041fc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e0:	d111      	bne.n	8004306 <SPI_EndRxTransaction+0x3a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d004      	beq.n	80042f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d107      	bne.n	8004306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff ff03 	bl	800411c <SPI_WaitFlagStateUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e023      	b.n	8004374 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004334:	d11d      	bne.n	8004372 <SPI_EndRxTransaction+0xa6>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433e:	d004      	beq.n	800434a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d113      	bne.n	8004372 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ff48 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e000      	b.n	8004374 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff29 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e027      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff feae 	bl	800411c <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e014      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff ff02 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e000      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01d      	b.n	8004456 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f002 f97c 	bl	800672c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fa60 	bl	800490c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	68d2      	ldr	r2, [r2, #12]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0202 	mvn.w	r2, #2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f9fa 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9ec 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f9fd 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d0 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9c2 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9d3 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0208 	mvn.w	r2, #8
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9a6 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f998 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9a9 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f97c 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f96e 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f97f 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0201 	mvn.w	r2, #1
 8004610:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f940 	bl	8004898 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800463c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fafe 	bl	8004c40 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d10e      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d107      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800466a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 faf1 	bl	8004c54 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004696:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f92d 	bl	80048f8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0220 	mvn.w	r2, #32
 80046c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fab1 	bl	8004c2c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_ConfigClockSource+0x1c>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0cf      	b.n	800488e <HAL_TIM_ConfigClockSource+0x1bc>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004710:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004718:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d07c      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x152>
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d80f      	bhi.n	800474e <HAL_TIM_ConfigClockSource+0x7c>
 800472e:	2b10      	cmp	r3, #16
 8004730:	f000 808f 	beq.w	8004852 <HAL_TIM_ConfigClockSource+0x180>
 8004734:	2b10      	cmp	r3, #16
 8004736:	d803      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x6e>
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8083 	beq.w	8004844 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 800473e:	e09d      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8004740:	2b20      	cmp	r3, #32
 8004742:	f000 808d 	beq.w	8004860 <HAL_TIM_ConfigClockSource+0x18e>
 8004746:	2b30      	cmp	r3, #48	; 0x30
 8004748:	f000 8091 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 800474c:	e096      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800474e:	2b70      	cmp	r3, #112	; 0x70
 8004750:	d018      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0xb2>
 8004752:	2b70      	cmp	r3, #112	; 0x70
 8004754:	d804      	bhi.n	8004760 <HAL_TIM_ConfigClockSource+0x8e>
 8004756:	2b50      	cmp	r3, #80	; 0x50
 8004758:	d044      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x112>
 800475a:	2b60      	cmp	r3, #96	; 0x60
 800475c:	d052      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 800475e:	e08d      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d003      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x9c>
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d028      	beq.n	80047be <HAL_TIM_ConfigClockSource+0xec>
    break;    
 800476c:	e086      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	6093      	str	r3, [r2, #8]
    break;
 8004782:	e07b      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f000 f9d3 	bl	8004b3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
    break;
 80047bc:	e05e      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6899      	ldr	r1, [r3, #8]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f000 f9b6 	bl	8004b3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e0:	609a      	str	r2, [r3, #8]
    break;
 80047e2:	e04b      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f000 f91d 	bl	8004a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2150      	movs	r1, #80	; 0x50
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f97e 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 8004802:	e03b      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	461a      	mov	r2, r3
 8004812:	f000 f940 	bl	8004a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2160      	movs	r1, #96	; 0x60
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f96e 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 8004822:	e02b      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	461a      	mov	r2, r3
 8004832:	f000 f8fd 	bl	8004a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f95e 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 8004842:	e01b      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f957 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 8004850:	e014      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2110      	movs	r1, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f950 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 800485e:	e00d      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2120      	movs	r1, #32
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f949 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 800486c:	e006      	b.n	800487c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2130      	movs	r1, #48	; 0x30
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f942 	bl	8004afe <TIM_ITRx_SetConfig>
    break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
cntr++;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048a8:	6013      	str	r3, [r2, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000088 	.word	0x20000088

080048bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <TIM_Base_SetConfig+0x108>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0x3c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x3c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <TIM_Base_SetConfig+0x10c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x3c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a38      	ldr	r2, [pc, #224]	; (8004a1c <TIM_Base_SetConfig+0x110>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x3c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a37      	ldr	r2, [pc, #220]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <TIM_Base_SetConfig+0x108>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <TIM_Base_SetConfig+0x10c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <TIM_Base_SetConfig+0x110>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <TIM_Base_SetConfig+0x118>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <TIM_Base_SetConfig+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0x8e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <TIM_Base_SetConfig+0x120>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <TIM_Base_SetConfig+0x108>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00f      	beq.n	80049f8 <TIM_Base_SetConfig+0xec>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0xec>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <TIM_Base_SetConfig+0x118>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0xec>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <TIM_Base_SetConfig+0x11c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0xec>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <TIM_Base_SetConfig+0x120>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	615a      	str	r2, [r3, #20]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800

08004a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f023 030a 	bic.w	r3, r3, #10
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0210 	bic.w	r2, r3, #16
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	031b      	lsls	r3, r3, #12
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004b1c:	887b      	ldrh	r3, [r7, #2]
 8004b1e:	f043 0307 	orr.w	r3, r3, #7
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b087      	sub	sp, #28
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	021a      	lsls	r2, r3, #8
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	609a      	str	r2, [r3, #8]
} 
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e03d      	b.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d108      	bne.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
} 
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40013400 	.word	0x40013400

08004c2c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e043      	b.n	8004d02 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fcd4 	bl	800663c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa1d 	bl	80050ec <UART_SetConfig>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e022      	b.n	8004d02 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fc0f 	bl	80054e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fc96 	bl	800562c <UART_CheckIdleState>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UART_Transmit_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d132      	bne.n	8004d8a <HAL_UART_Transmit_IT+0x80>
  {
    if((pData == NULL ) || (Size == 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Transmit_IT+0x26>
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e02b      	b.n	8004d8c <HAL_UART_Transmit_IT+0x82>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Transmit_IT+0x38>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e024      	b.n	8004d8c <HAL_UART_Transmit_IT+0x82>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2221      	movs	r2, #33	; 0x21
 8004d6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_UART_Transmit_IT+0x82>
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d15f      	bne.n	8004e72 <HAL_UART_Receive_IT+0xda>
  {
    if((pData == NULL ) || (Size == 0U))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_UART_Receive_IT+0x26>
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e058      	b.n	8004e74 <HAL_UART_Receive_IT+0xdc>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_Receive_IT+0x38>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e051      	b.n	8004e74 <HAL_UART_Receive_IT+0xdc>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	d10e      	bne.n	8004e16 <HAL_UART_Receive_IT+0x7e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <HAL_UART_Receive_IT+0x74>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e0a:	e015      	b.n	8004e38 <HAL_UART_Receive_IT+0xa0>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	22ff      	movs	r2, #255	; 0xff
 8004e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e14:	e010      	b.n	8004e38 <HAL_UART_Receive_IT+0xa0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_UART_Receive_IT+0xa0>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <HAL_UART_Receive_IT+0x98>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	22ff      	movs	r2, #255	; 0xff
 8004e2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e2e:	e003      	b.n	8004e38 <HAL_UART_Receive_IT+0xa0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	227f      	movs	r2, #127	; 0x7f
 8004e34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2222      	movs	r2, #34	; 0x22
 8004e42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004e6c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_UART_Receive_IT+0xdc>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x42>
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fced 	bl	800589a <UART_Receive_IT>
      return;
 8004ec0:	e0fa      	b.n	80050b8 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80ba 	beq.w	8005046 <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80af 	beq.w	8005046 <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <HAL_UART_IRQHandler+0x90>
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f08:	f043 0201 	orr.w	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <HAL_UART_IRQHandler+0xb8>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f30:	f043 0204 	orr.w	r2, r3, #4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <HAL_UART_IRQHandler+0xe0>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2204      	movs	r2, #4
 8004f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f58:	f043 0202 	orr.w	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d013      	beq.n	8004f92 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2208      	movs	r2, #8
 8004f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 808d 	beq.w	80050b6 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x136>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fc72 	bl	800589a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d031      	beq.n	8005034 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fbbe 	bl	8005752 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d023      	beq.n	800502c <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	6892      	ldr	r2, [r2, #8]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005000:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_UART_IRQHandler+0x240>)
 8005002:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fa5e 	bl	80004ca <HAL_DMA_Abort_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800501e:	4610      	mov	r0, r2
 8005020:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005022:	e00e      	b.n	8005042 <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f857 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502a:	e00a      	b.n	8005042 <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f853 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	e006      	b.n	8005042 <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f84f 	bl	80050d8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8005040:	e039      	b.n	80050b6 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005042:	bf00      	nop
    return;
 8005044:	e037      	b.n	80050b6 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <HAL_UART_IRQHandler+0x1fc>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d010      	beq.n	800507c <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005062:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fc7a 	bl	800596e <HAL_UARTEx_WakeupCallback>
    return;
 800507a:	e01d      	b.n	80050b8 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_UART_IRQHandler+0x218>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb92 	bl	80057ba <UART_Transmit_IT>
    return;
 8005096:	e00f      	b.n	80050b8 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_UART_IRQHandler+0x238>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fbdc 	bl	800586a <UART_EndTransmit_IT>
    return;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_UART_IRQHandler+0x238>
    return;
 80050b6:	bf00      	nop
  }

}
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	0800578f 	.word	0x0800578f

080050c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80050f8:	2310      	movs	r3, #16
 80050fa:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8005100:	2300      	movs	r3, #0
 8005102:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800512e:	f023 030c 	bic.w	r3, r3, #12
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	430b      	orrs	r3, r1
 8005136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	6852      	ldr	r2, [r2, #4]
 8005142:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4ab4      	ldr	r2, [pc, #720]	; (8005444 <UART_SetConfig+0x358>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d121      	bne.n	80051bc <UART_SetConfig+0xd0>
 8005178:	4bb3      	ldr	r3, [pc, #716]	; (8005448 <UART_SetConfig+0x35c>)
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d817      	bhi.n	80051b4 <UART_SetConfig+0xc8>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <UART_SetConfig+0xa0>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051a9 	.word	0x080051a9
 8005194:	080051af 	.word	0x080051af
 8005198:	080051a3 	.word	0x080051a3
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
 80051a0:	e0b2      	b.n	8005308 <UART_SetConfig+0x21c>
 80051a2:	2302      	movs	r3, #2
 80051a4:	75fb      	strb	r3, [r7, #23]
 80051a6:	e0af      	b.n	8005308 <UART_SetConfig+0x21c>
 80051a8:	2304      	movs	r3, #4
 80051aa:	75fb      	strb	r3, [r7, #23]
 80051ac:	e0ac      	b.n	8005308 <UART_SetConfig+0x21c>
 80051ae:	2308      	movs	r3, #8
 80051b0:	75fb      	strb	r3, [r7, #23]
 80051b2:	e0a9      	b.n	8005308 <UART_SetConfig+0x21c>
 80051b4:	2310      	movs	r3, #16
 80051b6:	75fb      	strb	r3, [r7, #23]
 80051b8:	bf00      	nop
 80051ba:	e0a5      	b.n	8005308 <UART_SetConfig+0x21c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4aa2      	ldr	r2, [pc, #648]	; (800544c <UART_SetConfig+0x360>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d123      	bne.n	800520e <UART_SetConfig+0x122>
 80051c6:	4ba0      	ldr	r3, [pc, #640]	; (8005448 <UART_SetConfig+0x35c>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d012      	beq.n	80051fa <UART_SetConfig+0x10e>
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d802      	bhi.n	80051e0 <UART_SetConfig+0xf4>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <UART_SetConfig+0x102>
 80051de:	e012      	b.n	8005206 <UART_SetConfig+0x11a>
 80051e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051e4:	d00c      	beq.n	8005200 <UART_SetConfig+0x114>
 80051e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ea:	d003      	beq.n	80051f4 <UART_SetConfig+0x108>
 80051ec:	e00b      	b.n	8005206 <UART_SetConfig+0x11a>
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
 80051f2:	e089      	b.n	8005308 <UART_SetConfig+0x21c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	75fb      	strb	r3, [r7, #23]
 80051f8:	e086      	b.n	8005308 <UART_SetConfig+0x21c>
 80051fa:	2304      	movs	r3, #4
 80051fc:	75fb      	strb	r3, [r7, #23]
 80051fe:	e083      	b.n	8005308 <UART_SetConfig+0x21c>
 8005200:	2308      	movs	r3, #8
 8005202:	75fb      	strb	r3, [r7, #23]
 8005204:	e080      	b.n	8005308 <UART_SetConfig+0x21c>
 8005206:	2310      	movs	r3, #16
 8005208:	75fb      	strb	r3, [r7, #23]
 800520a:	bf00      	nop
 800520c:	e07c      	b.n	8005308 <UART_SetConfig+0x21c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a8f      	ldr	r2, [pc, #572]	; (8005450 <UART_SetConfig+0x364>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d123      	bne.n	8005260 <UART_SetConfig+0x174>
 8005218:	4b8b      	ldr	r3, [pc, #556]	; (8005448 <UART_SetConfig+0x35c>)
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005224:	d012      	beq.n	800524c <UART_SetConfig+0x160>
 8005226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522a:	d802      	bhi.n	8005232 <UART_SetConfig+0x146>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <UART_SetConfig+0x154>
 8005230:	e012      	b.n	8005258 <UART_SetConfig+0x16c>
 8005232:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005236:	d00c      	beq.n	8005252 <UART_SetConfig+0x166>
 8005238:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800523c:	d003      	beq.n	8005246 <UART_SetConfig+0x15a>
 800523e:	e00b      	b.n	8005258 <UART_SetConfig+0x16c>
 8005240:	2300      	movs	r3, #0
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e060      	b.n	8005308 <UART_SetConfig+0x21c>
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
 800524a:	e05d      	b.n	8005308 <UART_SetConfig+0x21c>
 800524c:	2304      	movs	r3, #4
 800524e:	75fb      	strb	r3, [r7, #23]
 8005250:	e05a      	b.n	8005308 <UART_SetConfig+0x21c>
 8005252:	2308      	movs	r3, #8
 8005254:	75fb      	strb	r3, [r7, #23]
 8005256:	e057      	b.n	8005308 <UART_SetConfig+0x21c>
 8005258:	2310      	movs	r3, #16
 800525a:	75fb      	strb	r3, [r7, #23]
 800525c:	bf00      	nop
 800525e:	e053      	b.n	8005308 <UART_SetConfig+0x21c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a7b      	ldr	r2, [pc, #492]	; (8005454 <UART_SetConfig+0x368>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d123      	bne.n	80052b2 <UART_SetConfig+0x1c6>
 800526a:	4b77      	ldr	r3, [pc, #476]	; (8005448 <UART_SetConfig+0x35c>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005276:	d012      	beq.n	800529e <UART_SetConfig+0x1b2>
 8005278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527c:	d802      	bhi.n	8005284 <UART_SetConfig+0x198>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <UART_SetConfig+0x1a6>
 8005282:	e012      	b.n	80052aa <UART_SetConfig+0x1be>
 8005284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005288:	d00c      	beq.n	80052a4 <UART_SetConfig+0x1b8>
 800528a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800528e:	d003      	beq.n	8005298 <UART_SetConfig+0x1ac>
 8005290:	e00b      	b.n	80052aa <UART_SetConfig+0x1be>
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
 8005296:	e037      	b.n	8005308 <UART_SetConfig+0x21c>
 8005298:	2302      	movs	r3, #2
 800529a:	75fb      	strb	r3, [r7, #23]
 800529c:	e034      	b.n	8005308 <UART_SetConfig+0x21c>
 800529e:	2304      	movs	r3, #4
 80052a0:	75fb      	strb	r3, [r7, #23]
 80052a2:	e031      	b.n	8005308 <UART_SetConfig+0x21c>
 80052a4:	2308      	movs	r3, #8
 80052a6:	75fb      	strb	r3, [r7, #23]
 80052a8:	e02e      	b.n	8005308 <UART_SetConfig+0x21c>
 80052aa:	2310      	movs	r3, #16
 80052ac:	75fb      	strb	r3, [r7, #23]
 80052ae:	bf00      	nop
 80052b0:	e02a      	b.n	8005308 <UART_SetConfig+0x21c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a68      	ldr	r2, [pc, #416]	; (8005458 <UART_SetConfig+0x36c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d123      	bne.n	8005304 <UART_SetConfig+0x218>
 80052bc:	4b62      	ldr	r3, [pc, #392]	; (8005448 <UART_SetConfig+0x35c>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80052c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c8:	d012      	beq.n	80052f0 <UART_SetConfig+0x204>
 80052ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ce:	d802      	bhi.n	80052d6 <UART_SetConfig+0x1ea>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <UART_SetConfig+0x1f8>
 80052d4:	e012      	b.n	80052fc <UART_SetConfig+0x210>
 80052d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052da:	d00c      	beq.n	80052f6 <UART_SetConfig+0x20a>
 80052dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052e0:	d003      	beq.n	80052ea <UART_SetConfig+0x1fe>
 80052e2:	e00b      	b.n	80052fc <UART_SetConfig+0x210>
 80052e4:	2300      	movs	r3, #0
 80052e6:	75fb      	strb	r3, [r7, #23]
 80052e8:	e00e      	b.n	8005308 <UART_SetConfig+0x21c>
 80052ea:	2302      	movs	r3, #2
 80052ec:	75fb      	strb	r3, [r7, #23]
 80052ee:	e00b      	b.n	8005308 <UART_SetConfig+0x21c>
 80052f0:	2304      	movs	r3, #4
 80052f2:	75fb      	strb	r3, [r7, #23]
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x21c>
 80052f6:	2308      	movs	r3, #8
 80052f8:	75fb      	strb	r3, [r7, #23]
 80052fa:	e005      	b.n	8005308 <UART_SetConfig+0x21c>
 80052fc:	2310      	movs	r3, #16
 80052fe:	75fb      	strb	r3, [r7, #23]
 8005300:	bf00      	nop
 8005302:	e001      	b.n	8005308 <UART_SetConfig+0x21c>
 8005304:	2310      	movs	r3, #16
 8005306:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005310:	d16f      	bne.n	80053f2 <UART_SetConfig+0x306>
  {
    switch (clocksource)
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d857      	bhi.n	80053c8 <UART_SetConfig+0x2dc>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x234>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005345 	.word	0x08005345
 8005324:	08005361 	.word	0x08005361
 8005328:	0800537d 	.word	0x0800537d
 800532c:	080053c9 	.word	0x080053c9
 8005330:	08005397 	.word	0x08005397
 8005334:	080053c9 	.word	0x080053c9
 8005338:	080053c9 	.word	0x080053c9
 800533c:	080053c9 	.word	0x080053c9
 8005340:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005344:	f7fd ffe2 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 8005348:	4603      	mov	r3, r0
 800534a:	005a      	lsls	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	441a      	add	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	82bb      	strh	r3, [r7, #20]
        break;
 800535e:	e036      	b.n	80053ce <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005360:	f7fd fff6 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8005364:	4603      	mov	r3, r0
 8005366:	005a      	lsls	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	82bb      	strh	r3, [r7, #20]
        break;
 800537a:	e028      	b.n	80053ce <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005386:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005392:	82bb      	strh	r3, [r7, #20]
        break;
 8005394:	e01b      	b.n	80053ce <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005396:	f7fd ff43 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 800539a:	4603      	mov	r3, r0
 800539c:	005a      	lsls	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	441a      	add	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	82bb      	strh	r3, [r7, #20]
        break;
 80053b0:	e00d      	b.n	80053ce <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	82bb      	strh	r3, [r7, #20]
        break;
 80053c6:	e002      	b.n	80053ce <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	74fb      	strb	r3, [r7, #19]
        break;
 80053cc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80053ce:	8abb      	ldrh	r3, [r7, #20]
 80053d0:	f023 030f 	bic.w	r3, r3, #15
 80053d4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d6:	8abb      	ldrh	r3, [r7, #20]
 80053d8:	105b      	asrs	r3, r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	897a      	ldrh	r2, [r7, #10]
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	e075      	b.n	80054de <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d86f      	bhi.n	80054d8 <UART_SetConfig+0x3ec>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x314>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005425 	.word	0x08005425
 8005404:	0800545d 	.word	0x0800545d
 8005408:	0800547d 	.word	0x0800547d
 800540c:	080054d9 	.word	0x080054d9
 8005410:	0800549d 	.word	0x0800549d
 8005414:	080054d9 	.word	0x080054d9
 8005418:	080054d9 	.word	0x080054d9
 800541c:	080054d9 	.word	0x080054d9
 8005420:	080054bd 	.word	0x080054bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681c      	ldr	r4, [r3, #0]
 8005428:	f7fd ff70 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	60e3      	str	r3, [r4, #12]
        break;
 8005442:	e04c      	b.n	80054de <UART_SetConfig+0x3f2>
 8005444:	40013800 	.word	0x40013800
 8005448:	40021000 	.word	0x40021000
 800544c:	40004400 	.word	0x40004400
 8005450:	40004800 	.word	0x40004800
 8005454:	40004c00 	.word	0x40004c00
 8005458:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681c      	ldr	r4, [r3, #0]
 8005460:	f7fd ff76 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8005464:	4602      	mov	r2, r0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	60e3      	str	r3, [r4, #12]
        break;
 800547a:	e030      	b.n	80054de <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800548a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	6849      	ldr	r1, [r1, #4]
 8005492:	fbb3 f3f1 	udiv	r3, r3, r1
 8005496:	b29b      	uxth	r3, r3
 8005498:	60d3      	str	r3, [r2, #12]
        break;
 800549a:	e020      	b.n	80054de <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681c      	ldr	r4, [r3, #0]
 80054a0:	f7fd febe 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	60e3      	str	r3, [r4, #12]
        break;
 80054ba:	e010      	b.n	80054de <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6852      	ldr	r2, [r2, #4]
 80054c4:	0852      	lsrs	r2, r2, #1
 80054c6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80054d2:	b292      	uxth	r2, r2
 80054d4:	60da      	str	r2, [r3, #12]
        break;
 80054d6:	e002      	b.n	80054de <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	74fb      	strb	r3, [r7, #19]
        break;
 80054dc:	bf00      	nop
    }
  }

  return ret;
 80054de:	7cfb      	ldrb	r3, [r7, #19]

}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd90      	pop	{r4, r7, pc}

080054e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	6852      	ldr	r2, [r2, #4]
 8005506:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6852      	ldr	r2, [r2, #4]
 8005528:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005530:	430a      	orrs	r2, r1
 8005532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	6852      	ldr	r2, [r2, #4]
 800554a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	6892      	ldr	r2, [r2, #8]
 800558e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	6892      	ldr	r2, [r2, #8]
 80055b0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01a      	beq.n	80055fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	6852      	ldr	r2, [r2, #4]
 80055d2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e6:	d10a      	bne.n	80055fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	6852      	ldr	r2, [r2, #4]
 80055f2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800563e:	f7fa fe03 	bl	8000248 <HAL_GetTick>
 8005642:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b08      	cmp	r3, #8
 8005650:	d10e      	bne.n	8005670 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f82c 	bl	80056be <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e022      	b.n	80056b6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b04      	cmp	r3, #4
 800567c:	d10e      	bne.n	800569c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f816 	bl	80056be <UART_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e00c      	b.n	80056b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ce:	e02c      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d6:	d028      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x30>
 80056de:	f7fa fdb3 	bl	8000248 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d91d      	bls.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	6892      	ldr	r2, [r2, #8]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	401a      	ands	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d0c3      	beq.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005768:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff fc93 	bl	80050d8 <HAL_UART_ErrorCallback>
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b21      	cmp	r3, #33	; 0x21
 80057cc:	d146      	bne.n	800585c <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d111      	bne.n	80057fe <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e02f      	b.n	800585e <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d114      	bne.n	8005832 <UART_Transmit_IT+0x78>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	8812      	ldrh	r2, [r2, #0]
 800581e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005822:	b292      	uxth	r2, r2
 8005824:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005830:	e009      	b.n	8005846 <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583a:	1c58      	adds	r0, r3, #1
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	64c8      	str	r0, [r1, #76]	; 0x4c
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005880:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fc1a 	bl	80050c4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	d14e      	bne.n	8005954 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058bc:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d112      	bne.n	80058ee <UART_Receive_IT+0x54>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10e      	bne.n	80058ee <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80058d6:	89ba      	ldrh	r2, [r7, #12]
 80058d8:	89fb      	ldrh	r3, [r7, #14]
 80058da:	4013      	ands	r3, r2
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	1c9a      	adds	r2, r3, #2
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
 80058ec:	e00b      	b.n	8005906 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6551      	str	r1, [r2, #84]	; 0x54
 80058f8:	89ba      	ldrh	r2, [r7, #12]
 80058fa:	b2d1      	uxtb	r1, r2
 80058fc:	89fa      	ldrh	r2, [r7, #14]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	400a      	ands	r2, r1
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4619      	mov	r1, r3
 8005916:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 800591a:	2b00      	cmp	r3, #0
 800591c:	d118      	bne.n	8005950 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800592c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6892      	ldr	r2, [r2, #8]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9a8 	bl	8005c9c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	e00a      	b.n	8005966 <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e008      	b.n	8005966 <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	6992      	ldr	r2, [r2, #24]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005988:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <MX_I2C1_Init+0x80>)
 800598a:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <MX_I2C1_Init+0x84>)
 800598c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303E5D;
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <MX_I2C1_Init+0x80>)
 8005990:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <MX_I2C1_Init+0x88>)
 8005992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <MX_I2C1_Init+0x80>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <MX_I2C1_Init+0x80>)
 800599c:	2201      	movs	r2, #1
 800599e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059a0:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80059a6:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059ac:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059b2:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059b8:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059be:	4811      	ldr	r0, [pc, #68]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059c0:	f7fa ff6a 	bl	8000898 <HAL_I2C_Init>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <MX_I2C1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	4810      	ldr	r0, [pc, #64]	; (8005a10 <MX_I2C1_Init+0x8c>)
 80059ce:	f000 fded 	bl	80065ac <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80059d2:	2100      	movs	r1, #0
 80059d4:	480b      	ldr	r0, [pc, #44]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059d6:	f7fc faff 	bl	8001fd8 <HAL_I2CEx_ConfigAnalogFilter>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <MX_I2C1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059e0:	2147      	movs	r1, #71	; 0x47
 80059e2:	480b      	ldr	r0, [pc, #44]	; (8005a10 <MX_I2C1_Init+0x8c>)
 80059e4:	f000 fde2 	bl	80065ac <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80059e8:	2100      	movs	r1, #0
 80059ea:	4806      	ldr	r0, [pc, #24]	; (8005a04 <MX_I2C1_Init+0x80>)
 80059ec:	f7fc fb3f 	bl	800206e <HAL_I2CEx_ConfigDigitalFilter>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <MX_I2C1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059f6:	214e      	movs	r1, #78	; 0x4e
 80059f8:	4805      	ldr	r0, [pc, #20]	; (8005a10 <MX_I2C1_Init+0x8c>)
 80059fa:	f000 fdd7 	bl	80065ac <_Error_Handler>
  }

}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2000008c 	.word	0x2000008c
 8005a08:	40005400 	.word	0x40005400
 8005a0c:	00303e5d 	.word	0x00303e5d
 8005a10:	08006984 	.word	0x08006984

08005a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a19      	ldr	r2, [pc, #100]	; (8005a88 <HAL_I2C_MspInit+0x74>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d12b      	bne.n	8005a7e <HAL_I2C_MspInit+0x6a>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a26:	23c0      	movs	r3, #192	; 0xc0
 8005a28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a2a:	2312      	movs	r3, #18
 8005a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a32:	2303      	movs	r3, #3
 8005a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a36:	2304      	movs	r3, #4
 8005a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3a:	f107 030c 	add.w	r3, r7, #12
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4812      	ldr	r0, [pc, #72]	; (8005a8c <HAL_I2C_MspInit+0x78>)
 8005a42:	f7fa fd81 	bl	8000548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a46:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <HAL_I2C_MspInit+0x7c>)
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <HAL_I2C_MspInit+0x7c>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a50:	61d3      	str	r3, [r2, #28]
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <HAL_I2C_MspInit+0x7c>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	201f      	movs	r0, #31
 8005a64:	f7fa fcd1 	bl	800040a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a68:	201f      	movs	r0, #31
 8005a6a:	f7fa fcea 	bl	8000442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2100      	movs	r1, #0
 8005a72:	2020      	movs	r0, #32
 8005a74:	f7fa fcc9 	bl	800040a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005a78:	2020      	movs	r0, #32
 8005a7a:	f7fa fce2 	bl	8000442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40005400 	.word	0x40005400
 8005a8c:	48000400 	.word	0x48000400
 8005a90:	40021000 	.word	0x40021000

08005a94 <my_delay>:
#define INT1_TSH_ZL		0x37
#define INT1_DURATION	0x38

uint8_t Test[] = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \n"; //Data to send

void my_delay(unsigned int val){
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < val; i++){
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e002      	b.n	8005aa8 <my_delay+0x14>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3f8      	bcc.n	8005aa2 <my_delay+0xe>

	}
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <L3GD20_Read>:
uint8_t L3GD20_Read ( uint8_t addr ){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
	 uint8_t data;

	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2108      	movs	r1, #8
 8005aca:	481e      	ldr	r0, [pc, #120]	; (8005b44 <L3GD20_Read+0x88>)
 8005acc:	f7fa feba 	bl	8000844 <HAL_GPIO_WritePin>
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8005ad0:	bf00      	nop
 8005ad2:	481d      	ldr	r0, [pc, #116]	; (8005b48 <L3GD20_Read+0x8c>)
 8005ad4:	f7fe fb14 	bl	8004100 <HAL_SPI_GetState>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d1f9      	bne.n	8005ad2 <L3GD20_Read+0x16>
	 uint8_t wrt = addr | OKUMA_KOMUTU;
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	73bb      	strb	r3, [r7, #14]

	 HAL_SPI_Transmit(&hspi1, &wrt, 1, 50);
 8005ae8:	f107 010e 	add.w	r1, r7, #14
 8005aec:	2332      	movs	r3, #50	; 0x32
 8005aee:	2201      	movs	r2, #1
 8005af0:	4815      	ldr	r0, [pc, #84]	; (8005b48 <L3GD20_Read+0x8c>)
 8005af2:	f7fd fe8f 	bl	8003814 <HAL_SPI_Transmit>
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8005af6:	bf00      	nop
 8005af8:	4813      	ldr	r0, [pc, #76]	; (8005b48 <L3GD20_Read+0x8c>)
 8005afa:	f7fe fb01 	bl	8004100 <HAL_SPI_GetState>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d1f9      	bne.n	8005af8 <L3GD20_Read+0x3c>

	 HAL_SPI_Receive(&hspi1, &data, 1, 50);
 8005b04:	f107 010f 	add.w	r1, r7, #15
 8005b08:	2332      	movs	r3, #50	; 0x32
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	480e      	ldr	r0, [pc, #56]	; (8005b48 <L3GD20_Read+0x8c>)
 8005b0e:	f7fd ffd7 	bl	8003ac0 <HAL_SPI_Receive>
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8005b12:	bf00      	nop
 8005b14:	480c      	ldr	r0, [pc, #48]	; (8005b48 <L3GD20_Read+0x8c>)
 8005b16:	f7fe faf3 	bl	8004100 <HAL_SPI_GetState>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d1f9      	bne.n	8005b14 <L3GD20_Read+0x58>

	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8005b20:	2201      	movs	r2, #1
 8005b22:	2108      	movs	r1, #8
 8005b24:	4807      	ldr	r0, [pc, #28]	; (8005b44 <L3GD20_Read+0x88>)
 8005b26:	f7fa fe8d 	bl	8000844 <HAL_GPIO_WritePin>
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8005b2a:	bf00      	nop
 8005b2c:	4806      	ldr	r0, [pc, #24]	; (8005b48 <L3GD20_Read+0x8c>)
 8005b2e:	f7fe fae7 	bl	8004100 <HAL_SPI_GetState>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d1f9      	bne.n	8005b2c <L3GD20_Read+0x70>

	 return data;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	48001000 	.word	0x48001000
 8005b48:	20000198 	.word	0x20000198

08005b4c <SystemClock_Config>:
void SystemClock_Config(void){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b09e      	sub	sp, #120	; 0x78
 8005b50:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005b52:	2302      	movs	r3, #2
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b56:	2301      	movs	r3, #1
 8005b58:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8005b5a:	2310      	movs	r3, #16
 8005b5c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b62:	2300      	movs	r3, #0
 8005b64:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8005b66:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8005b6a:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fc facb 	bl	800210c <HAL_RCC_OscConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SystemClock_Config+0x38>
	{
	_Error_Handler(__FILE__, __LINE__);
 8005b7c:	2187      	movs	r1, #135	; 0x87
 8005b7e:	4828      	ldr	r0, [pc, #160]	; (8005c20 <SystemClock_Config+0xd4>)
 8005b80:	f000 fd14 	bl	80065ac <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b84:	230f      	movs	r3, #15
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b96:	2300      	movs	r3, #0
 8005b98:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005b9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd f99d 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <SystemClock_Config+0x68>
	{
	_Error_Handler(__FILE__, __LINE__);
 8005bac:	2195      	movs	r1, #149	; 0x95
 8005bae:	481c      	ldr	r0, [pc, #112]	; (8005c20 <SystemClock_Config+0xd4>)
 8005bb0:	f000 fcfc 	bl	80065ac <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fd fbe8 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <SystemClock_Config+0x86>
	{
	_Error_Handler(__FILE__, __LINE__);
 8005bca:	219c      	movs	r1, #156	; 0x9c
 8005bcc:	4814      	ldr	r0, [pc, #80]	; (8005c20 <SystemClock_Config+0xd4>)
 8005bce:	f000 fced 	bl	80065ac <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_CFGR3_I2C1SW_HSI;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bda:	463b      	mov	r3, r7
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd fbd9 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <SystemClock_Config+0xa4>
	{
	_Error_Handler(__FILE__, __LINE__);
 8005be8:	21a3      	movs	r1, #163	; 0xa3
 8005bea:	480d      	ldr	r0, [pc, #52]	; (8005c20 <SystemClock_Config+0xd4>)
 8005bec:	f000 fcde 	bl	80065ac <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005bf0:	f7fd fb80 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <SystemClock_Config+0xd8>)
 8005bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fa fc2d 	bl	800045e <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005c04:	2004      	movs	r0, #4
 8005c06:	f7fa fc37 	bl	8000478 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c12:	f7fa fbfa 	bl	800040a <HAL_NVIC_SetPriority>
}
 8005c16:	bf00      	nop
 8005c18:	3778      	adds	r7, #120	; 0x78
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08006994 	.word	0x08006994
 8005c24:	10624dd3 	.word	0x10624dd3

08005c28 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void){
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c2e:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <MX_USART1_UART_Init+0x68>)
 8005c30:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8005c32:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c38:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c4e:	220c      	movs	r2, #12
 8005c50:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8005c6a:	4808      	ldr	r0, [pc, #32]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c6c:	f7fe fffc 	bl	8004c68 <HAL_UART_Init>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <MX_USART1_UART_Init+0x56>
		_Error_Handler(__FILE__, __LINE__);
 8005c76:	21be      	movs	r1, #190	; 0xbe
 8005c78:	4806      	ldr	r0, [pc, #24]	; (8005c94 <MX_USART1_UART_Init+0x6c>)
 8005c7a:	f000 fc97 	bl	80065ac <_Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1,&rx_byte,1);// Sending in normal mode
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4905      	ldr	r1, [pc, #20]	; (8005c98 <MX_USART1_UART_Init+0x70>)
 8005c82:	4802      	ldr	r0, [pc, #8]	; (8005c8c <MX_USART1_UART_Init+0x64>)
 8005c84:	f7ff f888 	bl	8004d98 <HAL_UART_Receive_IT>

}
 8005c88:	bf00      	nop
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000100 	.word	0x20000100
 8005c90:	40013800 	.word	0x40013800
 8005c94:	08006994 	.word	0x08006994
 8005c98:	20000081 	.word	0x20000081

08005c9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	rx_buffer[rx_counter++] = rx_byte;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_UART_RxCpltCallback+0x38>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	b2d1      	uxtb	r1, r2
 8005cac:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <HAL_UART_RxCpltCallback+0x38>)
 8005cae:	7011      	strb	r1, [r2, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_UART_RxCpltCallback+0x3c>)
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_UART_RxCpltCallback+0x40>)
 8005cb8:	5499      	strb	r1, [r3, r2]
	rx_idle_counter = 0;
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_UART_RxCpltCallback+0x44>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,&rx_byte,1);// Sending in normal mode
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4905      	ldr	r1, [pc, #20]	; (8005cd8 <HAL_UART_RxCpltCallback+0x3c>)
 8005cc4:	4807      	ldr	r0, [pc, #28]	; (8005ce4 <HAL_UART_RxCpltCallback+0x48>)
 8005cc6:	f7ff f867 	bl	8004d98 <HAL_UART_Receive_IT>
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000080 	.word	0x20000080
 8005cd8:	20000081 	.word	0x20000081
 8005cdc:	20000040 	.word	0x20000040
 8005ce0:	20000038 	.word	0x20000038
 8005ce4:	20000100 	.word	0x20000100

08005ce8 <MX_SPI1_Init>:
static void MX_SPI1_Init(void){
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <MX_SPI1_Init+0x7c>)
 8005cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d00:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005d0e:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d1e:	2238      	movs	r2, #56	; 0x38
 8005d20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d36:	2207      	movs	r2, #7
 8005d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8005d46:	4806      	ldr	r0, [pc, #24]	; (8005d60 <MX_SPI1_Init+0x78>)
 8005d48:	f7fd fcd4 	bl	80036f4 <HAL_SPI_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <MX_SPI1_Init+0x72>
    _Error_Handler(__FILE__, __LINE__);
 8005d52:	21da      	movs	r1, #218	; 0xda
 8005d54:	4804      	ldr	r0, [pc, #16]	; (8005d68 <MX_SPI1_Init+0x80>)
 8005d56:	f000 fc29 	bl	80065ac <_Error_Handler>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000198 	.word	0x20000198
 8005d64:	40013000 	.word	0x40013000
 8005d68:	08006994 	.word	0x08006994

08005d6c <MX_TIM2_Init>:
static void MX_TIM2_Init(void){
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8005d72:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d7c:	221f      	movs	r2, #31
 8005d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d88:	2295      	movs	r2, #149	; 0x95
 8005d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d9a:	4817      	ldr	r0, [pc, #92]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005d9c:	f7fe fb34 	bl	8004408 <HAL_TIM_Base_Init>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005da6:	21ea      	movs	r1, #234	; 0xea
 8005da8:	4814      	ldr	r0, [pc, #80]	; (8005dfc <MX_TIM2_Init+0x90>)
 8005daa:	f000 fbff 	bl	80065ac <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	4619      	mov	r1, r3
 8005dba:	480f      	ldr	r0, [pc, #60]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005dbc:	f7fe fc89 	bl	80046d2 <HAL_TIM_ConfigClockSource>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005dc6:	21f0      	movs	r1, #240	; 0xf0
 8005dc8:	480c      	ldr	r0, [pc, #48]	; (8005dfc <MX_TIM2_Init+0x90>)
 8005dca:	f000 fbef 	bl	80065ac <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4807      	ldr	r0, [pc, #28]	; (8005df8 <MX_TIM2_Init+0x8c>)
 8005ddc:	f7fe fed2 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <MX_TIM2_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005de6:	21f7      	movs	r1, #247	; 0xf7
 8005de8:	4804      	ldr	r0, [pc, #16]	; (8005dfc <MX_TIM2_Init+0x90>)
 8005dea:	f000 fbdf 	bl	80065ac <_Error_Handler>
  }
}
 8005dee:	bf00      	nop
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000200 	.word	0x20000200
 8005dfc:	08006994 	.word	0x08006994

08005e00 <MX_GPIO_Init>:
static void MX_GPIO_Init(void){
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e06:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e10:	6153      	str	r3, [r2, #20]
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e28:	6153      	str	r3, [r2, #20]
 8005e2a:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e36:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e38:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e40:	6153      	str	r3, [r2, #20]
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e50:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e58:	6153      	str	r3, [r2, #20]
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e70:	6153      	str	r3, [r2, #20]
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <MX_GPIO_Init+0xcc>)
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE3 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8 | GPIO_PIN_9;
 8005e7e:	f44f 7342 	mov.w	r3, #776	; 0x308
 8005e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e84:	2301      	movs	r3, #1
 8005e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4619      	mov	r1, r3
 8005e96:	480e      	ldr	r0, [pc, #56]	; (8005ed0 <MX_GPIO_Init+0xd0>)
 8005e98:	f7fa fb56 	bl	8000548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e9c:	2330      	movs	r3, #48	; 0x30
 8005e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eac:	f107 0314 	add.w	r3, r7, #20
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4808      	ldr	r0, [pc, #32]	; (8005ed4 <MX_GPIO_Init+0xd4>)
 8005eb4:	f7fa fb48 	bl	8000548 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005ebe:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <MX_GPIO_Init+0xd0>)
 8005ec0:	f7fa fcc0 	bl	8000844 <HAL_GPIO_WritePin>

}
 8005ec4:	bf00      	nop
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	48001000 	.word	0x48001000
 8005ed4:	48000800 	.word	0x48000800

08005ed8 <read_gyro_x>:
void read_gyro_x(void){
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	X_low = L3GD20_Read ( OUT_X_L );
 8005edc:	2028      	movs	r0, #40	; 0x28
 8005ede:	f7ff fded 	bl	8005abc <L3GD20_Read>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <read_gyro_x+0x38>)
 8005ee8:	701a      	strb	r2, [r3, #0]
	X_high = L3GD20_Read ( OUT_X_H );
 8005eea:	2029      	movs	r0, #41	; 0x29
 8005eec:	f7ff fde6 	bl	8005abc <L3GD20_Read>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <read_gyro_x+0x3c>)
 8005ef6:	701a      	strb	r2, [r3, #0]
	x_value=(X_high * 256) + (X_low);
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <read_gyro_x+0x3c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <read_gyro_x+0x38>)
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	4413      	add	r3, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <read_gyro_x+0x40>)
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000002e 	.word	0x2000002e
 8005f14:	2000002f 	.word	0x2000002f
 8005f18:	20000020 	.word	0x20000020

08005f1c <read_gyro_y>:
void read_gyro_y(void){
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
	Y_low = L3GD20_Read ( OUT_Y_L );
 8005f20:	202a      	movs	r0, #42	; 0x2a
 8005f22:	f7ff fdcb 	bl	8005abc <L3GD20_Read>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <read_gyro_y+0x38>)
 8005f2c:	701a      	strb	r2, [r3, #0]
	Y_high = L3GD20_Read ( OUT_Y_H );
 8005f2e:	202b      	movs	r0, #43	; 0x2b
 8005f30:	f7ff fdc4 	bl	8005abc <L3GD20_Read>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <read_gyro_y+0x3c>)
 8005f3a:	701a      	strb	r2, [r3, #0]
	y_value=(Y_high * 256) + (Y_low);
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <read_gyro_y+0x3c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <read_gyro_y+0x38>)
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <read_gyro_y+0x40>)
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000030 	.word	0x20000030
 8005f58:	20000031 	.word	0x20000031
 8005f5c:	20000024 	.word	0x20000024

08005f60 <read_gyro_z>:
void read_gyro_z(void){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	Z_low = L3GD20_Read ( OUT_Z_L );
 8005f64:	202c      	movs	r0, #44	; 0x2c
 8005f66:	f7ff fda9 	bl	8005abc <L3GD20_Read>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <read_gyro_z+0x38>)
 8005f70:	701a      	strb	r2, [r3, #0]
	Z_high = L3GD20_Read ( OUT_Z_H );
 8005f72:	202d      	movs	r0, #45	; 0x2d
 8005f74:	f7ff fda2 	bl	8005abc <L3GD20_Read>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <read_gyro_z+0x3c>)
 8005f7e:	701a      	strb	r2, [r3, #0]
	z_value=(Z_high * 256) + (Z_low);
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <read_gyro_z+0x3c>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <read_gyro_z+0x38>)
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <read_gyro_z+0x40>)
 8005f90:	601a      	str	r2, [r3, #0]
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000032 	.word	0x20000032
 8005f9c:	20000033 	.word	0x20000033
 8005fa0:	20000028 	.word	0x20000028

08005fa4 <main>:
int main(void){
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af02      	add	r7, sp, #8
	HAL_Init();
 8005faa:	f7fa f90d 	bl	80001c8 <HAL_Init>
	SystemClock_Config();
 8005fae:	f7ff fdcd 	bl	8005b4c <SystemClock_Config>

	MX_GPIO_Init();
 8005fb2:	f7ff ff25 	bl	8005e00 <MX_GPIO_Init>
	MX_I2C1_Init();
 8005fb6:	f7ff fce5 	bl	8005984 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8005fba:	f7ff fe35 	bl	8005c28 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8005fbe:	f7ff fe93 	bl	8005ce8 <MX_SPI1_Init>
	MX_TIM2_Init();
 8005fc2:	f7ff fed3 	bl	8005d6c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8005fc6:	48bd      	ldr	r0, [pc, #756]	; (80062bc <main+0x318>)
 8005fc8:	f7fe fa49 	bl	800445e <HAL_TIM_Base_Start_IT>

	my_delay(100);
 8005fcc:	2064      	movs	r0, #100	; 0x64
 8005fce:	f7ff fd61 	bl	8005a94 <my_delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2108      	movs	r1, #8
 8005fd6:	48ba      	ldr	r0, [pc, #744]	; (80062c0 <main+0x31c>)
 8005fd8:	f7fa fc34 	bl	8000844 <HAL_GPIO_WritePin>
	my_delay(100);
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	f7ff fd59 	bl	8005a94 <my_delay>
	address_ctrl1 = CTRL_REG1;
 8005fe2:	4bb8      	ldr	r3, [pc, #736]	; (80062c4 <main+0x320>)
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	701a      	strb	r2, [r3, #0]
	data_ctrl1 = 0x0F;
 8005fe8:	4bb7      	ldr	r3, [pc, #732]	; (80062c8 <main+0x324>)
 8005fea:	220f      	movs	r2, #15
 8005fec:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &address_ctrl1, 1, 50);
 8005fee:	2332      	movs	r3, #50	; 0x32
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	49b4      	ldr	r1, [pc, #720]	; (80062c4 <main+0x320>)
 8005ff4:	48b5      	ldr	r0, [pc, #724]	; (80062cc <main+0x328>)
 8005ff6:	f7fd fc0d 	bl	8003814 <HAL_SPI_Transmit>
	my_delay(100);
 8005ffa:	2064      	movs	r0, #100	; 0x64
 8005ffc:	f7ff fd4a 	bl	8005a94 <my_delay>
	HAL_SPI_Transmit(&hspi1, &data_ctrl1, 1, 50);
 8006000:	2332      	movs	r3, #50	; 0x32
 8006002:	2201      	movs	r2, #1
 8006004:	49b0      	ldr	r1, [pc, #704]	; (80062c8 <main+0x324>)
 8006006:	48b1      	ldr	r0, [pc, #708]	; (80062cc <main+0x328>)
 8006008:	f7fd fc04 	bl	8003814 <HAL_SPI_Transmit>
	my_delay(100);
 800600c:	2064      	movs	r0, #100	; 0x64
 800600e:	f7ff fd41 	bl	8005a94 <my_delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8006012:	2201      	movs	r2, #1
 8006014:	2108      	movs	r1, #8
 8006016:	48aa      	ldr	r0, [pc, #680]	; (80062c0 <main+0x31c>)
 8006018:	f7fa fc14 	bl	8000844 <HAL_GPIO_WritePin>
	my_delay(100);
 800601c:	2064      	movs	r0, #100	; 0x64
 800601e:	f7ff fd39 	bl	8005a94 <my_delay>

	I2C_transmit_buffer[0] = 0x20;
 8006022:	4bab      	ldr	r3, [pc, #684]	; (80062d0 <main+0x32c>)
 8006024:	2220      	movs	r2, #32
 8006026:	701a      	strb	r2, [r3, #0]
	I2C_transmit_buffer[1] = 0x57;
 8006028:	4ba9      	ldr	r3, [pc, #676]	; (80062d0 <main+0x32c>)
 800602a:	2257      	movs	r2, #87	; 0x57
 800602c:	705a      	strb	r2, [r3, #1]
	while(HAL_I2C_Master_Transmit_IT(&hi2c1,0x32,I2C_transmit_buffer, 2)!= HAL_OK){}
 800602e:	bf00      	nop
 8006030:	2302      	movs	r3, #2
 8006032:	4aa7      	ldr	r2, [pc, #668]	; (80062d0 <main+0x32c>)
 8006034:	2132      	movs	r1, #50	; 0x32
 8006036:	48a7      	ldr	r0, [pc, #668]	; (80062d4 <main+0x330>)
 8006038:	f7fa fcbc 	bl	80009b4 <HAL_I2C_Master_Transmit_IT>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f6      	bne.n	8006030 <main+0x8c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8006042:	bf00      	nop
 8006044:	48a3      	ldr	r0, [pc, #652]	; (80062d4 <main+0x330>)
 8006046:	f7fa fea0 	bl	8000d8a <HAL_I2C_GetState>
 800604a:	4603      	mov	r3, r0
 800604c:	2b20      	cmp	r3, #32
 800604e:	d1f9      	bne.n	8006044 <main+0xa0>

	I2C_transmit_buffer[0] = 0x23;
 8006050:	4b9f      	ldr	r3, [pc, #636]	; (80062d0 <main+0x32c>)
 8006052:	2223      	movs	r2, #35	; 0x23
 8006054:	701a      	strb	r2, [r3, #0]
	I2C_transmit_buffer[1] = 0x00;
 8006056:	4b9e      	ldr	r3, [pc, #632]	; (80062d0 <main+0x32c>)
 8006058:	2200      	movs	r2, #0
 800605a:	705a      	strb	r2, [r3, #1]
	while(HAL_I2C_Master_Transmit_IT(&hi2c1,0x32,I2C_transmit_buffer, 2)!= HAL_OK){}
 800605c:	bf00      	nop
 800605e:	2302      	movs	r3, #2
 8006060:	4a9b      	ldr	r2, [pc, #620]	; (80062d0 <main+0x32c>)
 8006062:	2132      	movs	r1, #50	; 0x32
 8006064:	489b      	ldr	r0, [pc, #620]	; (80062d4 <main+0x330>)
 8006066:	f7fa fca5 	bl	80009b4 <HAL_I2C_Master_Transmit_IT>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f6      	bne.n	800605e <main+0xba>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8006070:	bf00      	nop
 8006072:	4898      	ldr	r0, [pc, #608]	; (80062d4 <main+0x330>)
 8006074:	f7fa fe89 	bl	8000d8a <HAL_I2C_GetState>
 8006078:	4603      	mov	r3, r0
 800607a:	2b20      	cmp	r3, #32
 800607c:	d1f9      	bne.n	8006072 <main+0xce>

	I2C_transmit_buffer[0] = 0x02;
 800607e:	4b94      	ldr	r3, [pc, #592]	; (80062d0 <main+0x32c>)
 8006080:	2202      	movs	r2, #2
 8006082:	701a      	strb	r2, [r3, #0]
	I2C_transmit_buffer[1] = 0x00;
 8006084:	4b92      	ldr	r3, [pc, #584]	; (80062d0 <main+0x32c>)
 8006086:	2200      	movs	r2, #0
 8006088:	705a      	strb	r2, [r3, #1]
	while(HAL_I2C_Master_Transmit_IT(&hi2c1,0x3C,I2C_transmit_buffer, 2)!= HAL_OK){}
 800608a:	bf00      	nop
 800608c:	2302      	movs	r3, #2
 800608e:	4a90      	ldr	r2, [pc, #576]	; (80062d0 <main+0x32c>)
 8006090:	213c      	movs	r1, #60	; 0x3c
 8006092:	4890      	ldr	r0, [pc, #576]	; (80062d4 <main+0x330>)
 8006094:	f7fa fc8e 	bl	80009b4 <HAL_I2C_Master_Transmit_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f6      	bne.n	800608c <main+0xe8>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800609e:	bf00      	nop
 80060a0:	488c      	ldr	r0, [pc, #560]	; (80062d4 <main+0x330>)
 80060a2:	f7fa fe72 	bl	8000d8a <HAL_I2C_GetState>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d1f9      	bne.n	80060a0 <main+0xfc>

	whoami = 0;
 80060ac:	4b8a      	ldr	r3, [pc, #552]	; (80062d8 <main+0x334>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
	cntr = 0;
 80060b2:	4b8a      	ldr	r3, [pc, #552]	; (80062dc <main+0x338>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
	rx_counter = 0;
 80060b8:	4b89      	ldr	r3, [pc, #548]	; (80062e0 <main+0x33c>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
	rx_idle_counter = 0;
 80060be:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <main+0x340>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
	while (1){
		if(_100_usec_counter > 999){
 80060c4:	4b88      	ldr	r3, [pc, #544]	; (80062e8 <main+0x344>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060cc:	db05      	blt.n	80060da <main+0x136>
			_100_usec_counter = 0;
 80060ce:	4b86      	ldr	r3, [pc, #536]	; (80062e8 <main+0x344>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
			_100_msec = 1;
 80060d4:	4b85      	ldr	r3, [pc, #532]	; (80062ec <main+0x348>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
		}
		if(_1_msec == 1){
 80060da:	4b85      	ldr	r3, [pc, #532]	; (80062f0 <main+0x34c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	f040 822a 	bne.w	8006538 <main+0x594>
			_1_msec = 0;
 80060e4:	4b82      	ldr	r3, [pc, #520]	; (80062f0 <main+0x34c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]

			rx_idle_counter++;
 80060ea:	4b7e      	ldr	r3, [pc, #504]	; (80062e4 <main+0x340>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	4a7c      	ldr	r2, [pc, #496]	; (80062e4 <main+0x340>)
 80060f2:	6013      	str	r3, [r2, #0]
			if(rx_idle_counter == 2){
 80060f4:	4b7b      	ldr	r3, [pc, #492]	; (80062e4 <main+0x340>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f040 821d 	bne.w	8006538 <main+0x594>
				rx_counter = 0;
 80060fe:	4b78      	ldr	r3, [pc, #480]	; (80062e0 <main+0x33c>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
				if((rx_buffer[0] == 'C')&&(rx_buffer[1] == 'O')&&(rx_buffer[2] == 'N')&&(rx_buffer[3] == 'V')){
 8006104:	4b7b      	ldr	r3, [pc, #492]	; (80062f4 <main+0x350>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b43      	cmp	r3, #67	; 0x43
 800610a:	f040 8208 	bne.w	800651e <main+0x57a>
 800610e:	4b79      	ldr	r3, [pc, #484]	; (80062f4 <main+0x350>)
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b4f      	cmp	r3, #79	; 0x4f
 8006114:	f040 8203 	bne.w	800651e <main+0x57a>
 8006118:	4b76      	ldr	r3, [pc, #472]	; (80062f4 <main+0x350>)
 800611a:	789b      	ldrb	r3, [r3, #2]
 800611c:	2b4e      	cmp	r3, #78	; 0x4e
 800611e:	f040 81fe 	bne.w	800651e <main+0x57a>
 8006122:	4b74      	ldr	r3, [pc, #464]	; (80062f4 <main+0x350>)
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	2b56      	cmp	r3, #86	; 0x56
 8006128:	f040 81f9 	bne.w	800651e <main+0x57a>
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9); // bu LED!!
 800612c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006130:	4863      	ldr	r0, [pc, #396]	; (80062c0 <main+0x31c>)
 8006132:	f7fa fb9f 	bl	8000874 <HAL_GPIO_TogglePin>

					STATUS_reg = L3GD20_Read ( STATUS_REG );
 8006136:	2027      	movs	r0, #39	; 0x27
 8006138:	f7ff fcc0 	bl	8005abc <L3GD20_Read>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	4b6d      	ldr	r3, [pc, #436]	; (80062f8 <main+0x354>)
 8006142:	701a      	strb	r2, [r3, #0]
					if((STATUS_reg & 0x01) == 0x01){
 8006144:	4b6c      	ldr	r3, [pc, #432]	; (80062f8 <main+0x354>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <main+0x1b0>
						read_gyro_x();
 8006150:	f7ff fec2 	bl	8005ed8 <read_gyro_x>
					}
					if((STATUS_reg & 0x02) == 0x02){
 8006154:	4b68      	ldr	r3, [pc, #416]	; (80062f8 <main+0x354>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <main+0x1c0>
						read_gyro_y();
 8006160:	f7ff fedc 	bl	8005f1c <read_gyro_y>
					}
					if((STATUS_reg & 0x04) == 0x04){
 8006164:	4b64      	ldr	r3, [pc, #400]	; (80062f8 <main+0x354>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <main+0x1d0>
						read_gyro_z();
 8006170:	f7ff fef6 	bl	8005f60 <read_gyro_z>
					}

					while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x27, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[6], 1)!= HAL_OK){}
 8006174:	bf00      	nop
 8006176:	2301      	movs	r3, #1
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	4b60      	ldr	r3, [pc, #384]	; (80062fc <main+0x358>)
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	2301      	movs	r3, #1
 8006180:	2227      	movs	r2, #39	; 0x27
 8006182:	2133      	movs	r1, #51	; 0x33
 8006184:	4853      	ldr	r0, [pc, #332]	; (80062d4 <main+0x330>)
 8006186:	f7fa fc85 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f2      	bne.n	8006176 <main+0x1d2>
					while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006190:	bf00      	nop
 8006192:	4850      	ldr	r0, [pc, #320]	; (80062d4 <main+0x330>)
 8006194:	f7fa fdf9 	bl	8000d8a <HAL_I2C_GetState>
 8006198:	4603      	mov	r3, r0
 800619a:	2b20      	cmp	r3, #32
 800619c:	d1f9      	bne.n	8006192 <main+0x1ee>
					I2C_ACC_status = I2C_receive_buffer[6];
 800619e:	4b58      	ldr	r3, [pc, #352]	; (8006300 <main+0x35c>)
 80061a0:	799a      	ldrb	r2, [r3, #6]
 80061a2:	4b58      	ldr	r3, [pc, #352]	; (8006304 <main+0x360>)
 80061a4:	701a      	strb	r2, [r3, #0]

					if((I2C_ACC_status & 0x01) == 0x01){	//x axis
 80061a6:	4b57      	ldr	r3, [pc, #348]	; (8006304 <main+0x360>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d029      	beq.n	8006206 <main+0x262>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x28, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[0], 1)!= HAL_OK){}
 80061b2:	bf00      	nop
 80061b4:	2301      	movs	r3, #1
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	4b51      	ldr	r3, [pc, #324]	; (8006300 <main+0x35c>)
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2301      	movs	r3, #1
 80061be:	2228      	movs	r2, #40	; 0x28
 80061c0:	2133      	movs	r1, #51	; 0x33
 80061c2:	4844      	ldr	r0, [pc, #272]	; (80062d4 <main+0x330>)
 80061c4:	f7fa fc66 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f2      	bne.n	80061b4 <main+0x210>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80061ce:	bf00      	nop
 80061d0:	4840      	ldr	r0, [pc, #256]	; (80062d4 <main+0x330>)
 80061d2:	f7fa fdda 	bl	8000d8a <HAL_I2C_GetState>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d1f9      	bne.n	80061d0 <main+0x22c>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x29, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[1], 1)!= HAL_OK){}
 80061dc:	bf00      	nop
 80061de:	2301      	movs	r3, #1
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	4b49      	ldr	r3, [pc, #292]	; (8006308 <main+0x364>)
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	2301      	movs	r3, #1
 80061e8:	2229      	movs	r2, #41	; 0x29
 80061ea:	2133      	movs	r1, #51	; 0x33
 80061ec:	4839      	ldr	r0, [pc, #228]	; (80062d4 <main+0x330>)
 80061ee:	f7fa fc51 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f2      	bne.n	80061de <main+0x23a>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80061f8:	bf00      	nop
 80061fa:	4836      	ldr	r0, [pc, #216]	; (80062d4 <main+0x330>)
 80061fc:	f7fa fdc5 	bl	8000d8a <HAL_I2C_GetState>
 8006200:	4603      	mov	r3, r0
 8006202:	2b20      	cmp	r3, #32
 8006204:	d1f9      	bne.n	80061fa <main+0x256>
					}
					if((I2C_ACC_status & 0x02) == 0x02){	//y axis
 8006206:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <main+0x360>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d029      	beq.n	8006266 <main+0x2c2>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x2A, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[2], 1)!= HAL_OK){}
 8006212:	bf00      	nop
 8006214:	2301      	movs	r3, #1
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	4b3c      	ldr	r3, [pc, #240]	; (800630c <main+0x368>)
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	2301      	movs	r3, #1
 800621e:	222a      	movs	r2, #42	; 0x2a
 8006220:	2133      	movs	r1, #51	; 0x33
 8006222:	482c      	ldr	r0, [pc, #176]	; (80062d4 <main+0x330>)
 8006224:	f7fa fc36 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f2      	bne.n	8006214 <main+0x270>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 800622e:	bf00      	nop
 8006230:	4828      	ldr	r0, [pc, #160]	; (80062d4 <main+0x330>)
 8006232:	f7fa fdaa 	bl	8000d8a <HAL_I2C_GetState>
 8006236:	4603      	mov	r3, r0
 8006238:	2b20      	cmp	r3, #32
 800623a:	d1f9      	bne.n	8006230 <main+0x28c>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x2B, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[3], 1)!= HAL_OK){}
 800623c:	bf00      	nop
 800623e:	2301      	movs	r3, #1
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	4b33      	ldr	r3, [pc, #204]	; (8006310 <main+0x36c>)
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2301      	movs	r3, #1
 8006248:	222b      	movs	r2, #43	; 0x2b
 800624a:	2133      	movs	r1, #51	; 0x33
 800624c:	4821      	ldr	r0, [pc, #132]	; (80062d4 <main+0x330>)
 800624e:	f7fa fc21 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f2      	bne.n	800623e <main+0x29a>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006258:	bf00      	nop
 800625a:	481e      	ldr	r0, [pc, #120]	; (80062d4 <main+0x330>)
 800625c:	f7fa fd95 	bl	8000d8a <HAL_I2C_GetState>
 8006260:	4603      	mov	r3, r0
 8006262:	2b20      	cmp	r3, #32
 8006264:	d1f9      	bne.n	800625a <main+0x2b6>
					}
					if((I2C_ACC_status & 0x04) == 0x04){	//z axis
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <main+0x360>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d05a      	beq.n	8006328 <main+0x384>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x2C, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[4], 1)!= HAL_OK){}
 8006272:	bf00      	nop
 8006274:	2301      	movs	r3, #1
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	4b26      	ldr	r3, [pc, #152]	; (8006314 <main+0x370>)
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2301      	movs	r3, #1
 800627e:	222c      	movs	r2, #44	; 0x2c
 8006280:	2133      	movs	r1, #51	; 0x33
 8006282:	4814      	ldr	r0, [pc, #80]	; (80062d4 <main+0x330>)
 8006284:	f7fa fc06 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f2      	bne.n	8006274 <main+0x2d0>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 800628e:	bf00      	nop
 8006290:	4810      	ldr	r0, [pc, #64]	; (80062d4 <main+0x330>)
 8006292:	f7fa fd7a 	bl	8000d8a <HAL_I2C_GetState>
 8006296:	4603      	mov	r3, r0
 8006298:	2b20      	cmp	r3, #32
 800629a:	d1f9      	bne.n	8006290 <main+0x2ec>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x33, 0x2D, I2C_MEMADD_SIZE_8BIT, &I2C_receive_buffer[5], 1)!= HAL_OK){}
 800629c:	bf00      	nop
 800629e:	2301      	movs	r3, #1
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <main+0x374>)
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2301      	movs	r3, #1
 80062a8:	222d      	movs	r2, #45	; 0x2d
 80062aa:	2133      	movs	r1, #51	; 0x33
 80062ac:	4809      	ldr	r0, [pc, #36]	; (80062d4 <main+0x330>)
 80062ae:	f7fa fbf1 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f2      	bne.n	800629e <main+0x2fa>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80062b8:	bf00      	nop
 80062ba:	e02f      	b.n	800631c <main+0x378>
 80062bc:	20000200 	.word	0x20000200
 80062c0:	48001000 	.word	0x48001000
 80062c4:	200000d9 	.word	0x200000d9
 80062c8:	20000170 	.word	0x20000170
 80062cc:	20000198 	.word	0x20000198
 80062d0:	200000dc 	.word	0x200000dc
 80062d4:	2000008c 	.word	0x2000008c
 80062d8:	2000002c 	.word	0x2000002c
 80062dc:	20000088 	.word	0x20000088
 80062e0:	20000080 	.word	0x20000080
 80062e4:	20000038 	.word	0x20000038
 80062e8:	20000084 	.word	0x20000084
 80062ec:	20000035 	.word	0x20000035
 80062f0:	20000034 	.word	0x20000034
 80062f4:	20000040 	.word	0x20000040
 80062f8:	2000002d 	.word	0x2000002d
 80062fc:	2000017a 	.word	0x2000017a
 8006300:	20000174 	.word	0x20000174
 8006304:	20000265 	.word	0x20000265
 8006308:	20000175 	.word	0x20000175
 800630c:	20000176 	.word	0x20000176
 8006310:	20000177 	.word	0x20000177
 8006314:	20000178 	.word	0x20000178
 8006318:	20000179 	.word	0x20000179
 800631c:	488d      	ldr	r0, [pc, #564]	; (8006554 <main+0x5b0>)
 800631e:	f7fa fd34 	bl	8000d8a <HAL_I2C_GetState>
 8006322:	4603      	mov	r3, r0
 8006324:	2b20      	cmp	r3, #32
 8006326:	d1f9      	bne.n	800631c <main+0x378>
					}

					while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x09, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[6], 1)!= HAL_OK){}
 8006328:	bf00      	nop
 800632a:	2301      	movs	r3, #1
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <main+0x5b4>)
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2301      	movs	r3, #1
 8006334:	2209      	movs	r2, #9
 8006336:	213d      	movs	r1, #61	; 0x3d
 8006338:	4886      	ldr	r0, [pc, #536]	; (8006554 <main+0x5b0>)
 800633a:	f7fa fbab 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f2      	bne.n	800632a <main+0x386>
					while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006344:	bf00      	nop
 8006346:	4883      	ldr	r0, [pc, #524]	; (8006554 <main+0x5b0>)
 8006348:	f7fa fd1f 	bl	8000d8a <HAL_I2C_GetState>
 800634c:	4603      	mov	r3, r0
 800634e:	2b20      	cmp	r3, #32
 8006350:	d1f9      	bne.n	8006346 <main+0x3a2>
					I2C_MAG_status = I2C_MAG_buffer[6];
 8006352:	4b82      	ldr	r3, [pc, #520]	; (800655c <main+0x5b8>)
 8006354:	799a      	ldrb	r2, [r3, #6]
 8006356:	4b82      	ldr	r3, [pc, #520]	; (8006560 <main+0x5bc>)
 8006358:	701a      	strb	r2, [r3, #0]

					if((I2C_MAG_status & 0x01) == 0x01){
 800635a:	4b81      	ldr	r3, [pc, #516]	; (8006560 <main+0x5bc>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d07d      	beq.n	8006462 <main+0x4be>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x03, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[0], 1)!= HAL_OK){}
 8006366:	bf00      	nop
 8006368:	2301      	movs	r3, #1
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	4b7b      	ldr	r3, [pc, #492]	; (800655c <main+0x5b8>)
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2301      	movs	r3, #1
 8006372:	2203      	movs	r2, #3
 8006374:	213d      	movs	r1, #61	; 0x3d
 8006376:	4877      	ldr	r0, [pc, #476]	; (8006554 <main+0x5b0>)
 8006378:	f7fa fb8c 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f2      	bne.n	8006368 <main+0x3c4>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006382:	bf00      	nop
 8006384:	4873      	ldr	r0, [pc, #460]	; (8006554 <main+0x5b0>)
 8006386:	f7fa fd00 	bl	8000d8a <HAL_I2C_GetState>
 800638a:	4603      	mov	r3, r0
 800638c:	2b20      	cmp	r3, #32
 800638e:	d1f9      	bne.n	8006384 <main+0x3e0>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x04, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[1], 1)!= HAL_OK){}
 8006390:	bf00      	nop
 8006392:	2301      	movs	r3, #1
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	4b73      	ldr	r3, [pc, #460]	; (8006564 <main+0x5c0>)
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2301      	movs	r3, #1
 800639c:	2204      	movs	r2, #4
 800639e:	213d      	movs	r1, #61	; 0x3d
 80063a0:	486c      	ldr	r0, [pc, #432]	; (8006554 <main+0x5b0>)
 80063a2:	f7fa fb77 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f2      	bne.n	8006392 <main+0x3ee>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80063ac:	bf00      	nop
 80063ae:	4869      	ldr	r0, [pc, #420]	; (8006554 <main+0x5b0>)
 80063b0:	f7fa fceb 	bl	8000d8a <HAL_I2C_GetState>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d1f9      	bne.n	80063ae <main+0x40a>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x05, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[2], 1)!= HAL_OK){}
 80063ba:	bf00      	nop
 80063bc:	2301      	movs	r3, #1
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	4b69      	ldr	r3, [pc, #420]	; (8006568 <main+0x5c4>)
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2301      	movs	r3, #1
 80063c6:	2205      	movs	r2, #5
 80063c8:	213d      	movs	r1, #61	; 0x3d
 80063ca:	4862      	ldr	r0, [pc, #392]	; (8006554 <main+0x5b0>)
 80063cc:	f7fa fb62 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f2      	bne.n	80063bc <main+0x418>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80063d6:	bf00      	nop
 80063d8:	485e      	ldr	r0, [pc, #376]	; (8006554 <main+0x5b0>)
 80063da:	f7fa fcd6 	bl	8000d8a <HAL_I2C_GetState>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d1f9      	bne.n	80063d8 <main+0x434>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x06, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[3], 1)!= HAL_OK){}
 80063e4:	bf00      	nop
 80063e6:	2301      	movs	r3, #1
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	4b60      	ldr	r3, [pc, #384]	; (800656c <main+0x5c8>)
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	2301      	movs	r3, #1
 80063f0:	2206      	movs	r2, #6
 80063f2:	213d      	movs	r1, #61	; 0x3d
 80063f4:	4857      	ldr	r0, [pc, #348]	; (8006554 <main+0x5b0>)
 80063f6:	f7fa fb4d 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f2      	bne.n	80063e6 <main+0x442>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006400:	bf00      	nop
 8006402:	4854      	ldr	r0, [pc, #336]	; (8006554 <main+0x5b0>)
 8006404:	f7fa fcc1 	bl	8000d8a <HAL_I2C_GetState>
 8006408:	4603      	mov	r3, r0
 800640a:	2b20      	cmp	r3, #32
 800640c:	d1f9      	bne.n	8006402 <main+0x45e>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x07, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[4], 1)!= HAL_OK){}
 800640e:	bf00      	nop
 8006410:	2301      	movs	r3, #1
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	4b56      	ldr	r3, [pc, #344]	; (8006570 <main+0x5cc>)
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2301      	movs	r3, #1
 800641a:	2207      	movs	r2, #7
 800641c:	213d      	movs	r1, #61	; 0x3d
 800641e:	484d      	ldr	r0, [pc, #308]	; (8006554 <main+0x5b0>)
 8006420:	f7fa fb38 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f2      	bne.n	8006410 <main+0x46c>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 800642a:	bf00      	nop
 800642c:	4849      	ldr	r0, [pc, #292]	; (8006554 <main+0x5b0>)
 800642e:	f7fa fcac 	bl	8000d8a <HAL_I2C_GetState>
 8006432:	4603      	mov	r3, r0
 8006434:	2b20      	cmp	r3, #32
 8006436:	d1f9      	bne.n	800642c <main+0x488>
						while(HAL_I2C_Mem_Read_IT(&hi2c1, 0x3D, 0x08, I2C_MEMADD_SIZE_8BIT, &I2C_MAG_buffer[5], 1)!= HAL_OK){}
 8006438:	bf00      	nop
 800643a:	2301      	movs	r3, #1
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	4b4d      	ldr	r3, [pc, #308]	; (8006574 <main+0x5d0>)
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2301      	movs	r3, #1
 8006444:	2208      	movs	r2, #8
 8006446:	213d      	movs	r1, #61	; 0x3d
 8006448:	4842      	ldr	r0, [pc, #264]	; (8006554 <main+0x5b0>)
 800644a:	f7fa fb23 	bl	8000a94 <HAL_I2C_Mem_Read_IT>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f2      	bne.n	800643a <main+0x496>
						while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 8006454:	bf00      	nop
 8006456:	483f      	ldr	r0, [pc, #252]	; (8006554 <main+0x5b0>)
 8006458:	f7fa fc97 	bl	8000d8a <HAL_I2C_GetState>
 800645c:	4603      	mov	r3, r0
 800645e:	2b20      	cmp	r3, #32
 8006460:	d1f9      	bne.n	8006456 <main+0x4b2>
					}

					tx_buffer[0] = 'G';
 8006462:	4b45      	ldr	r3, [pc, #276]	; (8006578 <main+0x5d4>)
 8006464:	2247      	movs	r2, #71	; 0x47
 8006466:	701a      	strb	r2, [r3, #0]
					tx_buffer[1] = 'Y';
 8006468:	4b43      	ldr	r3, [pc, #268]	; (8006578 <main+0x5d4>)
 800646a:	2259      	movs	r2, #89	; 0x59
 800646c:	705a      	strb	r2, [r3, #1]
					tx_buffer[2] = 'R';
 800646e:	4b42      	ldr	r3, [pc, #264]	; (8006578 <main+0x5d4>)
 8006470:	2252      	movs	r2, #82	; 0x52
 8006472:	709a      	strb	r2, [r3, #2]
					tx_buffer[3] = X_low;
 8006474:	4b41      	ldr	r3, [pc, #260]	; (800657c <main+0x5d8>)
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	4b3f      	ldr	r3, [pc, #252]	; (8006578 <main+0x5d4>)
 800647a:	70da      	strb	r2, [r3, #3]
					tx_buffer[4] = X_high;
 800647c:	4b40      	ldr	r3, [pc, #256]	; (8006580 <main+0x5dc>)
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <main+0x5d4>)
 8006482:	711a      	strb	r2, [r3, #4]
					tx_buffer[5] = Y_low;
 8006484:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <main+0x5e0>)
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <main+0x5d4>)
 800648a:	715a      	strb	r2, [r3, #5]
					tx_buffer[6] = Y_high;
 800648c:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <main+0x5e4>)
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	4b39      	ldr	r3, [pc, #228]	; (8006578 <main+0x5d4>)
 8006492:	719a      	strb	r2, [r3, #6]
					tx_buffer[7] = Z_low;
 8006494:	4b3d      	ldr	r3, [pc, #244]	; (800658c <main+0x5e8>)
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	4b37      	ldr	r3, [pc, #220]	; (8006578 <main+0x5d4>)
 800649a:	71da      	strb	r2, [r3, #7]
					tx_buffer[8] = Z_high;
 800649c:	4b3c      	ldr	r3, [pc, #240]	; (8006590 <main+0x5ec>)
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	4b35      	ldr	r3, [pc, #212]	; (8006578 <main+0x5d4>)
 80064a2:	721a      	strb	r2, [r3, #8]
					tx_buffer[9] = STATUS_reg;
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <main+0x5f0>)
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	4b33      	ldr	r3, [pc, #204]	; (8006578 <main+0x5d4>)
 80064aa:	725a      	strb	r2, [r3, #9]
					tx_buffer[10] = I2C_receive_buffer[0];
 80064ac:	4b3a      	ldr	r3, [pc, #232]	; (8006598 <main+0x5f4>)
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	4b31      	ldr	r3, [pc, #196]	; (8006578 <main+0x5d4>)
 80064b2:	729a      	strb	r2, [r3, #10]
					tx_buffer[11] = I2C_receive_buffer[1];
 80064b4:	4b38      	ldr	r3, [pc, #224]	; (8006598 <main+0x5f4>)
 80064b6:	785a      	ldrb	r2, [r3, #1]
 80064b8:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <main+0x5d4>)
 80064ba:	72da      	strb	r2, [r3, #11]
					tx_buffer[12] = I2C_receive_buffer[2];
 80064bc:	4b36      	ldr	r3, [pc, #216]	; (8006598 <main+0x5f4>)
 80064be:	789a      	ldrb	r2, [r3, #2]
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <main+0x5d4>)
 80064c2:	731a      	strb	r2, [r3, #12]
					tx_buffer[13] = I2C_receive_buffer[3];
 80064c4:	4b34      	ldr	r3, [pc, #208]	; (8006598 <main+0x5f4>)
 80064c6:	78da      	ldrb	r2, [r3, #3]
 80064c8:	4b2b      	ldr	r3, [pc, #172]	; (8006578 <main+0x5d4>)
 80064ca:	735a      	strb	r2, [r3, #13]
					tx_buffer[14] = I2C_receive_buffer[4];
 80064cc:	4b32      	ldr	r3, [pc, #200]	; (8006598 <main+0x5f4>)
 80064ce:	791a      	ldrb	r2, [r3, #4]
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <main+0x5d4>)
 80064d2:	739a      	strb	r2, [r3, #14]
					tx_buffer[15] = I2C_receive_buffer[5];
 80064d4:	4b30      	ldr	r3, [pc, #192]	; (8006598 <main+0x5f4>)
 80064d6:	795a      	ldrb	r2, [r3, #5]
 80064d8:	4b27      	ldr	r3, [pc, #156]	; (8006578 <main+0x5d4>)
 80064da:	73da      	strb	r2, [r3, #15]
					tx_buffer[16] = I2C_receive_buffer[6];
 80064dc:	4b2e      	ldr	r3, [pc, #184]	; (8006598 <main+0x5f4>)
 80064de:	799a      	ldrb	r2, [r3, #6]
 80064e0:	4b25      	ldr	r3, [pc, #148]	; (8006578 <main+0x5d4>)
 80064e2:	741a      	strb	r2, [r3, #16]
					tx_buffer[17] = I2C_MAG_buffer[0];
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <main+0x5b8>)
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	4b23      	ldr	r3, [pc, #140]	; (8006578 <main+0x5d4>)
 80064ea:	745a      	strb	r2, [r3, #17]
					tx_buffer[18] = I2C_MAG_buffer[1];
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <main+0x5b8>)
 80064ee:	785a      	ldrb	r2, [r3, #1]
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <main+0x5d4>)
 80064f2:	749a      	strb	r2, [r3, #18]
					tx_buffer[19] = I2C_MAG_buffer[2];
 80064f4:	4b19      	ldr	r3, [pc, #100]	; (800655c <main+0x5b8>)
 80064f6:	789a      	ldrb	r2, [r3, #2]
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <main+0x5d4>)
 80064fa:	74da      	strb	r2, [r3, #19]
					tx_buffer[20] = I2C_MAG_buffer[3];
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <main+0x5b8>)
 80064fe:	78da      	ldrb	r2, [r3, #3]
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <main+0x5d4>)
 8006502:	751a      	strb	r2, [r3, #20]
					tx_buffer[21] = I2C_MAG_buffer[4];
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <main+0x5b8>)
 8006506:	791a      	ldrb	r2, [r3, #4]
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <main+0x5d4>)
 800650a:	755a      	strb	r2, [r3, #21]
					tx_buffer[22] = I2C_MAG_buffer[5];
 800650c:	4b13      	ldr	r3, [pc, #76]	; (800655c <main+0x5b8>)
 800650e:	795a      	ldrb	r2, [r3, #5]
 8006510:	4b19      	ldr	r3, [pc, #100]	; (8006578 <main+0x5d4>)
 8006512:	759a      	strb	r2, [r3, #22]

					HAL_UART_Transmit_IT(&huart1,tx_buffer,23);
 8006514:	2217      	movs	r2, #23
 8006516:	4918      	ldr	r1, [pc, #96]	; (8006578 <main+0x5d4>)
 8006518:	4820      	ldr	r0, [pc, #128]	; (800659c <main+0x5f8>)
 800651a:	f7fe fbf6 	bl	8004d0a <HAL_UART_Transmit_IT>
				}
				for(unsigned char i = 0; i < 32; i++){
 800651e:	2300      	movs	r3, #0
 8006520:	71fb      	strb	r3, [r7, #7]
 8006522:	e006      	b.n	8006532 <main+0x58e>
					rx_buffer[i] = 0;
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <main+0x5fc>)
 8006528:	2100      	movs	r1, #0
 800652a:	54d1      	strb	r1, [r2, r3]
				for(unsigned char i = 0; i < 32; i++){
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	3301      	adds	r3, #1
 8006530:	71fb      	strb	r3, [r7, #7]
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	2b1f      	cmp	r3, #31
 8006536:	d9f5      	bls.n	8006524 <main+0x580>
				}
			}
		}
		if(_100_msec == 1){
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <main+0x600>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	f47f adc1 	bne.w	80060c4 <main+0x120>
			_100_msec = 0;
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <main+0x600>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // bu LED!!
 8006548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800654c:	4816      	ldr	r0, [pc, #88]	; (80065a8 <main+0x604>)
 800654e:	f7fa f991 	bl	8000874 <HAL_GPIO_TogglePin>
		if(_100_usec_counter > 999){
 8006552:	e5b7      	b.n	80060c4 <main+0x120>
 8006554:	2000008c 	.word	0x2000008c
 8006558:	2000024a 	.word	0x2000024a
 800655c:	20000244 	.word	0x20000244
 8006560:	200000fd 	.word	0x200000fd
 8006564:	20000245 	.word	0x20000245
 8006568:	20000246 	.word	0x20000246
 800656c:	20000247 	.word	0x20000247
 8006570:	20000248 	.word	0x20000248
 8006574:	20000249 	.word	0x20000249
 8006578:	20000060 	.word	0x20000060
 800657c:	2000002e 	.word	0x2000002e
 8006580:	2000002f 	.word	0x2000002f
 8006584:	20000030 	.word	0x20000030
 8006588:	20000031 	.word	0x20000031
 800658c:	20000032 	.word	0x20000032
 8006590:	20000033 	.word	0x20000033
 8006594:	2000002d 	.word	0x2000002d
 8006598:	20000174 	.word	0x20000174
 800659c:	20000100 	.word	0x20000100
 80065a0:	20000040 	.word	0x20000040
 80065a4:	20000035 	.word	0x20000035
 80065a8:	48001000 	.word	0x48001000

080065ac <_Error_Handler>:
		 */
	}
}

void _Error_Handler(char * file, int line)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  while(1) 
 80065b6:	e7fe      	b.n	80065b6 <_Error_Handler+0xa>

080065b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <HAL_MspInit+0x80>)
 80065c0:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <HAL_MspInit+0x80>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6193      	str	r3, [r2, #24]
 80065ca:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <HAL_MspInit+0x80>)
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065d6:	2003      	movs	r0, #3
 80065d8:	f7f9 ff0c 	bl	80003f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80065dc:	2200      	movs	r2, #0
 80065de:	2100      	movs	r1, #0
 80065e0:	f06f 000b 	mvn.w	r0, #11
 80065e4:	f7f9 ff11 	bl	800040a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	f06f 000a 	mvn.w	r0, #10
 80065f0:	f7f9 ff0b 	bl	800040a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	f06f 0009 	mvn.w	r0, #9
 80065fc:	f7f9 ff05 	bl	800040a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006600:	2200      	movs	r2, #0
 8006602:	2100      	movs	r1, #0
 8006604:	f06f 0004 	mvn.w	r0, #4
 8006608:	f7f9 feff 	bl	800040a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800660c:	2200      	movs	r2, #0
 800660e:	2100      	movs	r1, #0
 8006610:	f06f 0003 	mvn.w	r0, #3
 8006614:	f7f9 fef9 	bl	800040a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006618:	2200      	movs	r2, #0
 800661a:	2100      	movs	r1, #0
 800661c:	f06f 0001 	mvn.w	r0, #1
 8006620:	f7f9 fef3 	bl	800040a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006624:	2200      	movs	r2, #0
 8006626:	2100      	movs	r1, #0
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	f7f9 feed 	bl	800040a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000

0800663c <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <HAL_UART_MspInit+0x64>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d123      	bne.n	8006696 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800664e:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <HAL_UART_MspInit+0x68>)
 8006650:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <HAL_UART_MspInit+0x68>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006658:	6193      	str	r3, [r2, #24]
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_UART_MspInit+0x68>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006666:	2330      	movs	r3, #48	; 0x30
 8006668:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666a:	2302      	movs	r3, #2
 800666c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006672:	2303      	movs	r3, #3
 8006674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006676:	2307      	movs	r3, #7
 8006678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800667a:	f107 030c 	add.w	r3, r7, #12
 800667e:	4619      	mov	r1, r3
 8006680:	4809      	ldr	r0, [pc, #36]	; (80066a8 <HAL_UART_MspInit+0x6c>)
 8006682:	f7f9 ff61 	bl	8000548 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	2025      	movs	r0, #37	; 0x25
 800668c:	f7f9 febd 	bl	800040a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006690:	2025      	movs	r0, #37	; 0x25
 8006692:	f7f9 fed6 	bl	8000442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006696:	bf00      	nop
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40021000 	.word	0x40021000
 80066a8:	48000800 	.word	0x48000800

080066ac <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_SPI_MspInit+0x78>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d12d      	bne.n	800671a <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066be:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_SPI_MspInit+0x7c>)
 80066c0:	4b19      	ldr	r3, [pc, #100]	; (8006728 <HAL_SPI_MspInit+0x7c>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066c8:	6193      	str	r3, [r2, #24]
 80066ca:	4b17      	ldr	r3, [pc, #92]	; (8006728 <HAL_SPI_MspInit+0x7c>)
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80066d6:	23a0      	movs	r3, #160	; 0xa0
 80066d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066da:	2302      	movs	r3, #2
 80066dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80066e6:	2305      	movs	r3, #5
 80066e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	4619      	mov	r1, r3
 80066f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066f4:	f7f9 ff28 	bl	8000548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fc:	2302      	movs	r3, #2
 80066fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006704:	2300      	movs	r3, #0
 8006706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006708:	2305      	movs	r3, #5
 800670a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	4619      	mov	r1, r3
 8006712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006716:	f7f9 ff17 	bl	8000548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800671a:	bf00      	nop
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40013000 	.word	0x40013000
 8006728:	40021000 	.word	0x40021000

0800672c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d113      	bne.n	8006766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800673e:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <HAL_TIM_Base_MspInit+0x44>)
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_TIM_Base_MspInit+0x44>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	61d3      	str	r3, [r2, #28]
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_TIM_Base_MspInit+0x44>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	201c      	movs	r0, #28
 800675c:	f7f9 fe55 	bl	800040a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006760:	201c      	movs	r0, #28
 8006762:	f7f9 fe6e 	bl	8000442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000

08006774 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006782:	b480      	push	{r7}
 8006784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006786:	e7fe      	b.n	8006786 <HardFault_Handler+0x4>

08006788 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800678c:	e7fe      	b.n	800678c <MemManage_Handler+0x4>

0800678e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800678e:	b480      	push	{r7}
 8006790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006792:	e7fe      	b.n	8006792 <BusFault_Handler+0x4>

08006794 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006798:	e7fe      	b.n	8006798 <UsageFault_Handler+0x4>

0800679a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800679a:	b480      	push	{r7}
 800679c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800679e:	bf00      	nop
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067ac:	bf00      	nop
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80067b6:	b480      	push	{r7}
 80067b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067ba:	bf00      	nop
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <SysTick_Handler>:

void SysTick_Handler(void){ //1 msec tick timer
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
	_1_msec = 1;
 80067c8:	4b04      	ldr	r3, [pc, #16]	; (80067dc <SysTick_Handler+0x18>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
	HAL_IncTick();
 80067ce:	f7f9 fd2d 	bl	800022c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80067d2:	f7f9 fe6d 	bl	80004b0 <HAL_SYSTICK_IRQHandler>
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000034 	.word	0x20000034

080067e0 <TIM2_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void){ // 100usec
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
	_100_usec_counter++;
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <TIM2_IRQHandler+0x18>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	4a03      	ldr	r2, [pc, #12]	; (80067f8 <TIM2_IRQHandler+0x18>)
 80067ec:	6013      	str	r3, [r2, #0]

	HAL_TIM_IRQHandler(&htim2);
 80067ee:	4803      	ldr	r0, [pc, #12]	; (80067fc <TIM2_IRQHandler+0x1c>)
 80067f0:	f7fd fe50 	bl	8004494 <HAL_TIM_IRQHandler>
}
 80067f4:	bf00      	nop
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000084 	.word	0x20000084
 80067fc:	20000200 	.word	0x20000200

08006800 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <USART1_IRQHandler+0x10>)
 8006806:	f7fe fb3b 	bl	8004e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000100 	.word	0x20000100

08006814 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006818:	4802      	ldr	r0, [pc, #8]	; (8006824 <I2C1_EV_IRQHandler+0x10>)
 800681a:	f7fa f9d9 	bl	8000bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	2000008c 	.word	0x2000008c

08006828 <I2C1_ER_IRQHandler>:
/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800682c:	4802      	ldr	r0, [pc, #8]	; (8006838 <I2C1_ER_IRQHandler+0x10>)
 800682e:	f7fa f9e9 	bl	8000c04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000008c 	.word	0x2000008c

0800683c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <SystemInit+0x84>)
 8006842:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <SystemInit+0x84>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800684c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006850:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <SystemInit+0x88>)
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <SystemInit+0x88>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800685c:	4919      	ldr	r1, [pc, #100]	; (80068c4 <SystemInit+0x88>)
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <SystemInit+0x88>)
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <SystemInit+0x8c>)
 8006864:	4013      	ands	r3, r2
 8006866:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006868:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <SystemInit+0x88>)
 800686a:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <SystemInit+0x88>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006876:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006878:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <SystemInit+0x88>)
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <SystemInit+0x88>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006882:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006884:	4a0f      	ldr	r2, [pc, #60]	; (80068c4 <SystemInit+0x88>)
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <SystemInit+0x88>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800688e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006890:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <SystemInit+0x88>)
 8006892:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <SystemInit+0x88>)
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	f023 030f 	bic.w	r3, r3, #15
 800689a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800689c:	4909      	ldr	r1, [pc, #36]	; (80068c4 <SystemInit+0x88>)
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <SystemInit+0x88>)
 80068a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <SystemInit+0x90>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <SystemInit+0x88>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <SystemInit+0x84>)
 80068b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068b4:	609a      	str	r2, [r3, #8]
#endif
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	e000ed00 	.word	0xe000ed00
 80068c4:	40021000 	.word	0x40021000
 80068c8:	f87fc00c 	.word	0xf87fc00c
 80068cc:	ff00fccc 	.word	0xff00fccc

080068d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80068d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006908 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80068d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80068d6:	e003      	b.n	80068e0 <LoopCopyDataInit>

080068d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80068da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80068dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80068de:	3104      	adds	r1, #4

080068e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80068e0:	480b      	ldr	r0, [pc, #44]	; (8006910 <LoopForever+0xa>)
	ldr	r3, =_edata
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <LoopForever+0xe>)
	adds	r2, r0, r1
 80068e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80068e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80068e8:	d3f6      	bcc.n	80068d8 <CopyDataInit>
	ldr	r2, =_sbss
 80068ea:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <LoopForever+0x12>)
	b	LoopFillZerobss
 80068ec:	e002      	b.n	80068f4 <LoopFillZerobss>

080068ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80068ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80068f0:	f842 3b04 	str.w	r3, [r2], #4

080068f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <LoopForever+0x16>)
	cmp	r2, r3
 80068f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80068f8:	d3f9      	bcc.n	80068ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80068fa:	f7ff ff9f 	bl	800683c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068fe:	f000 f811 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006902:	f7ff fb4f 	bl	8005fa4 <main>

08006906 <LoopForever>:

LoopForever:
    b LoopForever
 8006906:	e7fe      	b.n	8006906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006908:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800690c:	080069e4 	.word	0x080069e4
	ldr	r0, =_sdata
 8006910:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006914:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8006918:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 800691c:	20000268 	.word	0x20000268

08006920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006920:	e7fe      	b.n	8006920 <ADC1_2_IRQHandler>
	...

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0d      	ldr	r6, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1ba4      	subs	r4, r4, r6
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2500      	movs	r5, #0
 8006930:	42a5      	cmp	r5, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4e0b      	ldr	r6, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f000 f818 	bl	800696c <_init>
 800693c:	1ba4      	subs	r4, r4, r6
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2500      	movs	r5, #0
 8006942:	42a5      	cmp	r5, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800694c:	4798      	blx	r3
 800694e:	3501      	adds	r5, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006956:	4798      	blx	r3
 8006958:	3501      	adds	r5, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	080069dc 	.word	0x080069dc
 8006960:	080069dc 	.word	0x080069dc
 8006964:	080069dc 	.word	0x080069dc
 8006968:	080069e0 	.word	0x080069e0

0800696c <_init>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr

08006978 <_fini>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr
